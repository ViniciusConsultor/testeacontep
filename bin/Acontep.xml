<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Acontep</name>
    </assembly>
    <members>
        <member name="T:Acontep.Validacoes.ValidacaoEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoEventArgs.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoEventArgs.Valor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoEventArgs.RotuloMensagemErro">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoEventArgs.MensagemErro">
            <summary>
            
            </summary>
        </member>
        <member name="T:Acontep.Validacoes.ValidacaoDataSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoDataSet.#ctor(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoDataSet.ObterValidacaoDataSet(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoDataSet.Item(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoDataSet.Item(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoDataSet.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="tableIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoDataSet.ValidacaoExtendProperty">
            <summary>
            Nome da propriedade extendida do <see cref="T:System.Data.DataSet"/> que contem
            <c>ValidacaoDataTable</c>
            </summary>
        </member>
        <member name="T:Acontep.OpcaoEscopo">
            <summary>
            Opcoes para modificar como <see cref="P:Acontep.Escopo.Atual"/> é afetado quando construindo um novo escopo
            </summary>
        </member>
        <member name="F:Acontep.OpcaoEscopo.Requerido">
            <summary>
            Se nao existir nenhum escopo entao cria um novo, caso contrario nao faz nada. Essa é a opção padrão
            </summary>
        </member>
        <member name="F:Acontep.OpcaoEscopo.RequerNovo">
            <summary>
            Informa que esse é o escopo atual (armazena escopos anteriores e restaura eles no dispose)
            </summary>
            <remarks>
            Use essa opção se deseja usar a mesma conexao mas em uma transação diferente, ou mesmo sem transacao.
            </remarks>
        </member>
        <member name="T:Acontep.OpcaoTransacao">
            <summary>
            Opcoes para modificar como <see cref="P:Acontep.Escopo.Atual"/> lida com a criacao de transacoes
            </summary>
        </member>
        <member name="F:Acontep.OpcaoTransacao.Automatico">
            <summary>
            Usa a transacao corrente se existir no escopo, caso contrario nao faz nada. Essa é a opção padrão
            </summary>
        </member>
        <member name="F:Acontep.OpcaoTransacao.Requerido">
            <summary>
            Usa a transacao corrente se existir no escopo, caso contrario cria um novo escopo com uma transacao aberta. 
            </summary>
            <remarks>Se uma for solicitado a criacao de uma transacao dentro de um escopo ja existente, e não
            for informado <see cref="F:Acontep.OpcaoEscopo.Requerido"/> explicitamente entao um novo escopo sera iniciado de forma transparente, 
            fazendo com que ao fim do escopo que iniciou uma transação o commit ocorra.</remarks>
        </member>
        <member name="T:Acontep.Intervalo">
            <summary>
            Tipo de intervalo a ser verificado na conversao
            </summary>
        </member>
        <member name="F:Acontep.Intervalo.Igual">
            <summary>
            Validar valor igual
            </summary>
        </member>
        <member name="F:Acontep.Intervalo.Menor">
            <summary>
            Validar apenas valor menor
            </summary>
        </member>
        <member name="F:Acontep.Intervalo.Maior">
            <summary>
            Validar apenas valor maior
            </summary>
        </member>
        <member name="F:Acontep.Intervalo.MenorIgual">
            <summary>
            Validar valor menor ou igual
            </summary>
        </member>
        <member name="F:Acontep.Intervalo.MaiorIgual">
            <summary>
            Validar valor maior ou igual
            </summary>
        </member>
        <member name="F:Acontep.Intervalo.ContidoExclusivo">
            <summary>
            Validar valor contido em um intervalo mas nao igual
            </summary>
        </member>
        <member name="F:Acontep.Intervalo.ContidoInclusivo">
            <summary>
            Validar valor contido em um intervalo e também igual
            </summary>
        </member>
        <member name="T:Acontep.Dado.BdUtil">
            <summary>
            Utilitario de execucao de comandos via ADO.NET. Sempre instanciar dentro do <see cref="T:Acontep.Escopo"/> onde se deseja usar.
            </summary>
            <remarks>
            Se existir um <see cref="P:Acontep.Dado.BdUtil.ContextoAcessoDado"/> em <see cref="P:Acontep.Escopo.Atual"/> entao usa o mesmo,
            compartilhando conexoes e transações dentro de um mesmo escopo.
            Se nao existir <see cref="P:Acontep.Escopo.Atual"/> um <see cref="P:Acontep.Dado.BdUtil.ContextoAcessoDado"/> é criado exclusivamente
            para a instancia do <c>BdUtil</c>.
            Opcionalmente o <see cref="P:Acontep.Dado.BdUtil.ContextoAcessoDado"/> pode ser atribuido diretamente via propriedade 
            <see cref="P:Acontep.Dado.BdUtil.ContextoAcessoDado"/>
            </remarks>
            <summary>
            Operacoes de classe de BdUtil
            </summary>
        </member>
        <member name="T:Acontep.Componente">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Componente.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Componente.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Componente.Dispose(System.Boolean)">
            <summary>
            Libera os recursos associados a classe
            </summary>
            <remarks>
            So libera recursos se estiver sendo chamado por Dispose. 
            Se estiver sendo chamado pelo finalizador eu nao posso referenciar outros objetos
            uma vez que os finalizadores nao ocorrem em nenhuma ordem definida. Se eu tentar
            referenciar um objeto que ja foi finalizado no finalizador eu vou provocar um erro
            </remarks>
            <param name="disposing">Indica se o metodo esta sendo chamado por dispose ou pelo finalizador</param>
        </member>
        <member name="M:Acontep.Componente.ChecarDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Componente.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Componente.EstaFinalizado">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Componente.MensagemErroObjectDisposedException">
            <summary>
            A mensagem de erro que sera passada como parametro em <see cref="T:System.ObjectDisposedException"/> na
            chamada de <see cref="M:Acontep.Componente.ChecarDisposed"/>
            </summary>
        </member>
        <member name="F:Acontep.Dado.BdUtil.NOME_PARAMETRO_RETORNO">
            <summary>
            Identificado do retorno
            </summary>
        </member>
        <member name="M:Acontep.Dado.BdUtil.#ctor(System.String,System.Data.CommandType)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AjustandoValorDeParametro(System.Data.Common.DbParameter)">
            <summary>
            Ajusta valor de parametros para <see cref="T:System.DBNull"/> quando necessario
            </summary>
            <remarks>
            <para>Sao 3 os casos que o valor do parâmetro é substiuído por <see cref="T:System.DBNull"/>:</para>
            <para>1. O valor é nulo</para>
            <para>2. O valor é uma <see cref="T:System.String"/> e possui comprimento zero</para>
            <para>3. O valor é um <see cref="T:System.DateTime"/> e possui valor igual <see cref="F:System.DateTime.MinValue"/></para>
            </remarks>
            <param name="parametro"></param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ConfigTipoCommandDataAdapter(Acontep.Dado.TipoCommandDataAdapter,System.String)">
            <summary>
            Seleciona o tipo de command do <see cref="P:Acontep.Dado.BdUtil.DataAdapter"/> que as operações de configuracao
            de um command vão afetar e atribui <see cref="P:Acontep.Dado.BdUtil.CommandText"/> para o tipo de comando. 
            <paramref name="valor"/> indica qual o comando que vai ser usado para qualquer operação
            dessa classe.
            </summary>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ConfigTipoCommandDataAdapter(Acontep.Dado.TipoCommandDataAdapter,System.String,System.Data.CommandType)">
            <summary>
            Seleciona o tipo de command do <see cref="P:Acontep.Dado.BdUtil.DataAdapter"/> que as operações de configuracao
            de um command vão afetar e atribui <see cref="P:Acontep.Dado.BdUtil.CommandText"/> para o tipo de comando. 
            <paramref name="valor"/> indica qual o comando que vai ser usado para qualquer operação
            dessa classe.
            </summary>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ConfigTipoCommandDataAdapter(Acontep.Dado.TipoCommandDataAdapter)">
            <summary>
            Seleciona o tipo de command do <see cref="P:Acontep.Dado.BdUtil.DataAdapter"/> que as operações de configuracao
            de um command vão afetar. Essa configuracacao indica qual o comando que vai ser usado para qualquer operação
            dessa classe.
            </summary>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterTipoCommandDataAdapterConfigurado">
            <summary>
            Obtemo tipo de command do <see cref="P:Acontep.Dado.BdUtil.DataAdapter"/> configurado para uso
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AtribuirValorParametro(System.String,System.Object)">
            <summary>
            Atribui valor ao parametro de nomeParametro informado
            </summary>
            <param name="nomeParametro">Nome do parametro a ser atribuido valor</param>
            <param name="valor">Valor do parametro</param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AtribuirValorParametro(System.Data.Common.DbParameter,System.Object)">
            <summary>
            Atribui valor ao parametro de nomeParametro informado
            </summary>
            <param name="parametro">Parametro a ser atribuido valor</param>
            <param name="valor">Valor do parametro</param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterValorParametro(System.String)">
            <summary>
            Obtem um parâmetro da coleção de parâmetros armazenada.
            Deve ser utilizada para obter os valores dos parâmetros de retorno de rotinas armazenadas
            </summary>
            <param name="nome">Nome</param>
            <returns>Valor do parâmetro</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterValorParametro``1(System.String)">
            <summary>
            Obtem um parâmetro da coleção de parâmetros armazenada.
            Deve ser utilizada para obter os valores dos parâmetros de retorno de rotinas armazenadas
            </summary>
            <typeparam name="T">Tipo de dado do parametro</typeparam>
            <param name="nomeParametro">Nome do parametro</param>
            <exception cref="T:System.InvalidCastException">O tipo retornado nao pode ser convertido para <typeparamref name="T"/></exception>
            <exception cref="T:System.NullReferenceException"><typeparamref name="T"/> nao pode ter um valor nulo e um valor nulo foi retornado</exception>
            <returns>Valor do parâmetro</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterValorRetorno">
            <summary>
            Obtem o valor de retorno do ultimo comando executado
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterValorRetorno``1">
            <summary>
            Obtem o valor de retorno do ultimo comando executado
            </summary>
            <exception cref="T:System.InvalidCastException">O tipo retornado nao pode ser convertido para <typeparamref name="T"/></exception>
            <exception cref="T:System.NullReferenceException"><typeparamref name="T"/> nao pode ter um valor nulo e um valor nulo foi retornado</exception>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametro(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.String)">
            <summary>
            Adiciona parametros no <see cref="P:Acontep.Dado.BdUtil.Command"/> sendo contruido por esta instancia
            </summary>
            <param name="nomeParametro">Nome do parametro</param>
            <param name="tipoDado">Tipo de dado do parametro</param>
            <param name="tamanho">Tamanho</param>
            <param name="direcao">Direcao do parametro</param>
            <param name="colunaOrigem">Coluna de origem mapeada para o <see cref="T:System.Data.DataSet"/> e usado para carregar ou retorno o <see cref="P:System.Data.Common.DbParameter.Value"/></param>
            <returns>Instancia do parametro que foi adicionado</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametro(System.String,System.Data.DbType,System.Byte,System.Byte,System.Data.ParameterDirection,System.String)">
            <summary>
            Adiciona parametros no <see cref="P:Acontep.Dado.BdUtil.Command"/> sendo contruido por esta instancia
            </summary>
            <param name="nomeParametro">Nome do parametro</param>
            <param name="tipoDado">Tipo de dado do parametro</param>
            <param name="precisao">Número máximo de dígitos usado para ser representado por <see cref="P:System.Data.Common.DbParameter.Value"/></param>
            <param name="escala">Número de casas decimais que <see cref="P:System.Data.Common.DbParameter.Value"/> é resolvido</param>
            <param name="direcao">Direcao do parametro</param>
            <param name="colunaOrigem">Coluna de origem mapeada para o <see cref="T:System.Data.DataSet"/> e usado para carregar ou retorno o <see cref="P:System.Data.Common.DbParameter.Value"/></param>
            <returns>Instancia do parametro que foi adicionado</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametro(System.String,System.Data.DbType,System.Byte,System.Byte,System.String)">
            <summary>
            Adiciona parametros no <see cref="P:Acontep.Dado.BdUtil.Command"/> sendo contruido por esta instancia
            </summary>
            <param name="nomeParametro">Nome do parametro</param>
            <param name="tipoDado">Tipo de dado do parametro</param>
            <param name="precisao">Número máximo de dígitos usado para ser representado por <see cref="P:System.Data.Common.DbParameter.Value"/></param>
            <param name="escala">Número de casas decimais que <see cref="P:System.Data.Common.DbParameter.Value"/> é resolvido</param>
            <param name="colunaOrigem">Coluna de origem mapeada para o <see cref="T:System.Data.DataSet"/> e usado para carregar ou retorno o <see cref="P:System.Data.Common.DbParameter.Value"/></param>
            <returns>Instancia do parametro que foi adicionado</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametro(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="tamanho"></param>
            <param name="colunaOrigem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametro(System.String,System.Data.DbType,System.String)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="colunaOrigem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametroInOut(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="tamanho"></param>
            <param name="colunaOrigem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametroInOut(System.String,System.Data.DbType,System.String)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="colunaOrigem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametroOut(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="tamanho"></param>
            <param name="colunaOrigem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametroOut(System.String,System.Data.DbType,System.String)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="colunaOrigem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametroRetorno(System.Data.DbType,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="tipoDado"></param>
            <param name="tamanho"></param>
            <param name="colunaOrigem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarParametroRetorno(System.Data.DbType,System.String)">
            <summary>
            
            </summary>
            <param name="tipoDado"></param>
            <param name="colunaOrigem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AdicionarParametro(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Adiciona parametros no <see cref="P:Acontep.Dado.BdUtil.Command"/> sendo contruido por esta instancia
            </summary>
            <param name="nomeParametro">Nome do parametro</param>
            <param name="tipoDado">Tipo de dado do parametro</param>
            <param name="tamanho">Tamanho</param>
            <param name="direcao">Direcao do parametro</param>
            <param name="valor">Valor do parametro</param>
            <returns>Instancia do parametro que foi adicionado</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AdicionarParametro(System.String,System.Data.DbType,System.Byte,System.Byte,System.Data.ParameterDirection,System.Object)">
            <summary>
            Adiciona parametros no <see cref="P:Acontep.Dado.BdUtil.Command"/> sendo contruido por esta instancia
            </summary>
            <param name="nomeParametro">Nome do parametro</param>
            <param name="tipoDado">Tipo de dado do parametro</param>
            <param name="precisao">Número máximo de dígitos usado para ser representado por <see cref="P:System.Data.Common.DbParameter.Value"/></param>
            <param name="escala">Número de casas decimais que <see cref="P:System.Data.Common.DbParameter.Value"/> é resolvido</param>
            <param name="direcao">Direcao do parametro</param>
            <param name="valor">Valor do parametro</param>
            <returns>Instancia do parametro que foi adicionado</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AdicionarParametro(System.String,System.Data.DbType,System.Byte,System.Byte,System.Object)">
            <summary>
            Adiciona parametros no <see cref="P:Acontep.Dado.BdUtil.Command"/> sendo contruido por esta instancia
            </summary>
            <param name="nomeParametro">Nome do parametro</param>
            <param name="tipoDado">Tipo de dado do parametro</param>
            <param name="precisao">Número máximo de dígitos usado para ser representado por <see cref="P:System.Data.Common.DbParameter.Value"/></param>
            <param name="escala">Número de casas decimais que <see cref="P:System.Data.Common.DbParameter.Value"/> é resolvido</param>
            <param name="valor">Valor do parametro</param>
            <returns>Instancia do parametro que foi adicionado</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AdicionarParametro(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="tamanho"></param>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AdicionarParametro(System.String,System.Data.DbType,System.Object)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AdicionarParametroInOut(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="tamanho"></param>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AdicionarParametroInOut(System.String,System.Data.DbType,System.Object)">
            <summary>
            
            </summary>
            <param name="nome"></param>
            <param name="tipoDado"></param>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ExecuteNonQuery">
            <summary>
            Executa um sql que nao retorna valores
            </summary>
            <returns>Quantidade de registros afetados na execução</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ExecuteReader">
            <summary>
            Retorna dados somente leitura e sequencial usando <see cref="T:System.Data.Common.DbDataReader"/> 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ExecuteScalar">
            <summary>
            Retorna a primeira coluna do primeiro registro do resultado retornado pela query. Todos as outras
            colunas e linhas são ignoradas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ExecuteScalar``1">
            <summary>
            Retorna um unico valor de uma consulta
            </summary>
            <typeparam name="T">Tipo do dado a ser retornado</typeparam>
            <exception cref="T:System.InvalidCastException">O tipo retornado nao pode ser convertido para <typeparamref name="T"/></exception>
            <exception cref="T:System.NullReferenceException"><typeparamref name="T"/> nao pode ter um valor nulo e um valor nulo foi retornado</exception>
            <returns>Dado do tipo <typeparamref name="T"/></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Fill(System.Data.DataSet)">
            <summary>
            Adiciona ou atualiza linhas em um <see cref="T:System.Data.DataTable"/> para igualar às linhas do data source
            usando o nome do <see cref="T:System.Data.DataTable"/>, o COMANDO SQL especificado e o <see cref="T:System.Data.CommandBehavior"/>.
            </summary>
            <param name="dataSet">Um <see cref="T:System.Data.DataSet"/> para preencher com registros e, se necessário, com schema</param>
            <returns>Quantidade de linhas adicionadas e atualizadas</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Fill(System.Data.DataSet,System.String[])">
            <summary>
            Adiciona ou atualiza linhas em um <see cref="T:System.Data.DataTable"/> para igualar às linhas do data source
            usando o nome do <see cref="T:System.Data.DataTable"/>, o COMANDO SQL especificado e o <see cref="T:System.Data.CommandBehavior"/>.
            </summary>
            <param name="dataSet">Um <see cref="T:System.Data.DataSet"/> para preencher com registros e, se necessário, com schema</param>
            <param name="srcTables">Lista de nomes de tabelas, por ordem de retorno, a ser usado para mapeamento das tabelas retornadas</param>
            <returns>Quantidade de linhas adicionadas e atualizadas</returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ConfigTableMappings(System.Data.Common.DbDataAdapter,System.String[])">
            <summary>
            Cria uma colecao de <see cref="T:System.Data.Common.DataTableMapping"/> a partir de <paramref name="srcTables"/>
            e associa ao <paramref name="adapter"/>
            </summary>
            <param name="adapter"></param>
            <param name="srcTables"></param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Fill(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterDataSet">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterDataTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterDataSet``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterDataSet``1(System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="srcTables"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterDataTable``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Update(System.Data.DataSet)">
            <summary>
            Atualiza os registros do <see cref="T:System.Data.DataSet"/>, atraves dos comandos configurados para insert, 
            update e delete, usando <see cref="T:Acontep.Dado.TipoCommandDataAdapter"/>. 
            Se uma transacao já existe no <see cref="T:Acontep.Escopo"/> ela é usada, caso contrário uma nova transação
            é iniciada para todo o processo de atualização.
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Update(System.Data.DataSet,Acontep.OpcaoTransacao)">
            <summary>
            Atualiza os registros do <see cref="T:System.Data.DataSet"/>, atraves dos comandos configurados para insert, 
            update e delete, usando <see cref="T:Acontep.Dado.TipoCommandDataAdapter"/>
            </summary>
            <param name="dataSet"></param>
            <param name="opcaoTransacao">Indica o tipo de transação para a atualização</param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Update(System.Data.DataSet,System.String)">
            <summary>
            Atualiza os registros do <see cref="T:System.Data.DataSet"/>, correspondente ao <paramref name="srcTable"/>, 
            atraves dos comandos configurados para insert, update e delete, 
            usando <see cref="T:Acontep.Dado.TipoCommandDataAdapter"/>. 
            Se uma transacao já existe no <see cref="T:Acontep.Escopo"/> ela é usada, caso contrário uma nova transação
            é iniciada para todo o processo de atualização.
            </summary>
            <param name="dataSet"></param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Update(System.Data.DataTable)">
            <summary>
            Atualiza os registros do <see cref="T:System.Data.DataTable"/>, atraves dos comandos configurados para insert, 
            update e delete, usando <see cref="T:Acontep.Dado.TipoCommandDataAdapter"/>. 
            Se uma transacao já existe no <see cref="T:Acontep.Escopo"/> ela é usada, caso contrário uma nova transação
            é iniciada para todo o processo de atualização.
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Update(System.Data.DataTable,Acontep.OpcaoTransacao)">
            <summary>
            Atualiza os registros do <see cref="T:System.Data.DataTable"/>, atraves dos comandos configurados para insert, 
            update e delete, usando <see cref="T:Acontep.Dado.TipoCommandDataAdapter"/>
            </summary>
            <param name="dataTable"></param>
            <param name="opcaoTransacao"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Update(System.Data.DataRow[])">
            <summary>
            Atualiza as linhas, atraves dos comandos configurados para insert, 
            update e delete, usando <see cref="T:Acontep.Dado.TipoCommandDataAdapter"/>. 
            Se uma transacao já existe no <see cref="T:Acontep.Escopo"/> ela é usada, caso contrário uma nova transação
            é iniciada para todo o processo de atualização.
            </summary>
            <param name="dataRows"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Update(System.Data.DataRow[],Acontep.OpcaoTransacao)">
            <summary>
            Atualiza as linhas, atraves dos comandos configurados para insert, 
            update e delete, usando <see cref="T:Acontep.Dado.TipoCommandDataAdapter"/>
            </summary>
            <param name="dataRows"></param>
            <param name="opcaoTransacao"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.Dispose(System.Boolean)">
            <summary>
            Libera os recursos associados a classe
            </summary>
            <param name="disposing">Indica se o metodo esta sendo chamado por dispose ou pelo finalizador</param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.EhParametroSaidaRetornoValor(System.Data.ParameterDirection)">
            <summary>
            Verifica se a direcao do parametro corresponde a um valor de saida/retorno
            </summary>
            <param name="direcao"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.AbrirConexao(System.Data.Common.DbConnection,System.Data.ConnectionState@)">
            <summary>
            Abertura de conexao, se fechada, e retorno o estado original da conexao para controle posterior
            se fecha ou nao ao conexao, ao fim da operacao
            </summary>
            <param name="connection">Conexao que vai estar aberta ao fim do metodo</param>
            <param name="estadoOriginal">Obtem o estado original da conexao, para controle se deve ou nao fechar a conexao</param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.FecharConexao(System.Data.Common.DbConnection,System.Data.ConnectionState)">
            <summary>
            Fecha conexao, se estava fechada quando foi aberta no inicio do comando
            </summary>
            <param name="connection"></param>
            <param name="estadoOriginal"></param>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarCommandParaContexto(Acontep.Dado.ContextoAcessoDado,System.String,System.Data.CommandType,System.Int32)">
            <summary>
            
            </summary>
            <param name="contextoAcessoDado"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarDataAdapterParaContexto(Acontep.Dado.ContextoAcessoDado,System.Data.Common.DbCommand)">
            <summary>
            
            </summary>
            <param name="contextoAcessoDado"></param>
            <param name="comm"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.ObterCommand(Acontep.Dado.ContextoAcessoDado,Acontep.Dado.TipoCommandDataAdapter,System.Collections.Generic.Dictionary{Acontep.Dado.TipoCommandDataAdapter,Acontep.Dado.CommandWrapper})">
            <summary>
            Extrair <see cref="T:System.Data.Common.DbCommand"/> de uma lista de <see cref="T:Acontep.Dado.CommandWrapper"/>s através do <see cref="T:Acontep.Dado.TipoCommandDataAdapter"/>
            </summary>
            <param name="contextoAcessoDado"></param>
            <param name="tipoCommandDataAdapter"></param>
            <param name="commandWrappersDataAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Dado.BdUtil.CriarDataAdapterDeCommandWrappers(Acontep.Dado.ContextoAcessoDado,System.Collections.Generic.Dictionary{Acontep.Dado.TipoCommandDataAdapter,Acontep.Dado.CommandWrapper})">
            <summary>
            
            </summary>
            <param name="contextoAcessoDado"></param>
            <param name="commandWrappers"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Dado.BdUtil.Command">
            <summary>
            <see cref="T:System.Data.Common.DbCommand"/> criado por <see cref="T:Acontep.Dado.BdUtil"/>, referente ao <see cref="M:Acontep.Dado.BdUtil.ObterTipoCommandDataAdapterConfigurado"/>
            </summary>
        </member>
        <member name="P:Acontep.Dado.BdUtil.CommandTimeout">
            <summary>
            Obtem ou atribui o tempo de espera antes de terminar a tentativa de executar um comando
            e gerar um erro
            </summary>
        </member>
        <member name="P:Acontep.Dado.BdUtil.UpdateBatchSize">
            <summary>
            Obtem ou atribui o valor que habilita ou disabilita suporte a processamente em batch,
            e especifica o número de comandos que podem ser executados em um batch. Essa propriedade
            apenas surtira efeito se  metodo Update for usado.
            </summary>
        </member>
        <member name="P:Acontep.Dado.BdUtil.DataAdapter">
            <summary>
            <see cref="T:System.Data.Common.DbDataAdapter"/> com <see cref="P:Acontep.Dado.BdUtil.Command"/> como valor para <see cref="P:System.Data.Common.DbDataAdapter.SelectCommand"/>
            </summary>
        </member>
        <member name="P:Acontep.Dado.BdUtil.ContextoAcessoDado">
            <summary>
            Obtem o <see cref="P:Acontep.Dado.BdUtil.ContextoAcessoDado"/> associado a esta instância
            </summary>
            <remarks>
            Se nao existir nenhum escopo disponivel cria um <see cref="P:Acontep.Dado.BdUtil.ContextoAcessoDado"/> privado e gerencia
            a sua vida util, chamando <see cref="M:Acontep.Dado.ContextoAcessoDado.Dispose(System.Boolean)"/> quando <see cref="M:Acontep.Dado.BdUtil.Dispose(System.Boolean)"/> ocorrer.
            Caso contrario, usa o <see cref="T:Acontep.Dado.ContextoAcessoDado"/> de <see cref="T:Acontep.Escopo"/> 
            </remarks>
        </member>
        <member name="P:Acontep.Dado.BdUtil.CommandText">
            <summary>
            Texto do commando para o <see cref="M:Acontep.Dado.BdUtil.ObterTipoCommandDataAdapterConfigurado"/>
            </summary>
        </member>
        <member name="P:Acontep.Dado.BdUtil.CommandType">
            <summary>
            Tipo de command a ser executado.
            </summary>
            <seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="P:Acontep.Dado.BdUtil.CommandWrapperSelec">
            <summary>
            Obtem o command wrapper selecionado atraves de <see cref="M:Acontep.Dado.BdUtil.ObterTipoCommandDataAdapterConfigurado"/>
            </summary>
        </member>
        <member name="P:Acontep.Dado.BdUtil.MensagemErroObjectDisposedException">
            <summary>
            Retorna o nome do objeto que causou o erro de Dispoded
            </summary>
        </member>
        <member name="T:Acontep.Formatacao">
            <summary>
            Classe reponsável pelas formatações
            </summary>
        </member>
        <member name="M:Acontep.Formatacao.FormatarCPF(System.Object)">
            <summary>
            Formata um valor para a mascara de CPF. Caso o tipo não seja identificado, ele retorna o próprio valor.
            </summary>
            <param name="cpf">valor que será aplicado a máscara</param>
        </member>
        <member name="M:Acontep.Formatacao.FormatarCnpj(System.Object)">
            <summary>
            Formata um valor para a mascara de Cnpj. Caso o tipo não seja identificado, ele retorna o próprio valor.
            </summary>
            <param name="cnpj">valor que será aplicado a máscara</param>
        </member>
        <member name="M:Acontep.Formatacao.FormatarCnpjCpf(System.Object,System.Object)">
            <summary>
            Formata um valor para a mascara de CPF ou Cnpj. Caso o tipo não seja identificado, ele retorna o próprio valor.
            </summary>
            <param name="valor">valor que será aplicado a máscara</param>
            <param name="tipo">Tipo da máscara. [P] =  CPF e [J] = CNPJ</param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Formatacao.FormatarCep(System.Object)">
            <summary>
            Aplica a máscara de CEP
            </summary>
            <param name="valor">Valor a ser aplicada a máscara.</param>
            <returns>Valor na máscara 99.999-999</returns>
        </member>
        <member name="M:Acontep.Formatacao.RemoverFormatacaoCep(System.String)">
            <summary>
            Remove a formatação de CEP.
            </summary>
            <param name="ValorFormatado"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Formatacao.FormatarLike(System.String)">
            <summary>
            Formata para busca que usam like colocando no final "%" caso não exista
            </summary>
            <param name="valor">valor a ser consultado</param>
            <returns></returns>
        </member>
        <member name="T:Acontep.Dado.CommandWrapper">
            <summary>
            Encapsula um command, sem instanciar ele
            </summary>
        </member>
        <member name="M:Acontep.Dado.CommandWrapper.Dispose(System.Boolean)">
            <summary>
            Libera os recursos associados a classe
            </summary>
            <param name="disposing">Indica se o metodo esta sendo chamado por dispose ou pelo finalizador</param>
        </member>
        <member name="P:Acontep.Dado.CommandWrapper.CommandTimeout">
            <summary>
            Obtem ou atribui o tempo de timeout do command
            </summary>
        </member>
        <member name="P:Acontep.Dado.CommandWrapper.CommandText">
            <summary>
            Obtem ou atribui <see cref="P:System.Data.Common.DbCommand.CommandText"/>
            </summary>
        </member>
        <member name="T:Acontep.Validacoes.ValorInvalidoException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Acontep.AcontepException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.AcontepException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.AcontepException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Acontep.AcontepException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Acontep.AcontepException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Acontep.Validacoes.ValorInvalidoException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.ValorInvalidoException.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.ValorInvalidoException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.ValorInvalidoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Acontep.Validacoes.ValidacaoEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Acontep.TipoErroContraint">
            <summary>
            Tipos de excessões
            </summary>
        </member>
        <member name="F:Acontep.TipoErroContraint.FK_Insert">
            <summary>
            Violação de FK de insert.
            </summary>
        </member>
        <member name="F:Acontep.TipoErroContraint.FK_Delete">
            <summary>
            Violação de Fk de delete.
            </summary>
        </member>
        <member name="F:Acontep.TipoErroContraint.PrimaryKey">
            <summary>
            Violação de primary key.
            </summary>
        </member>
        <member name="F:Acontep.TipoErroContraint.UniqueKey">
            <summary>
            Violação de Unique Key.
            </summary>
        </member>
        <member name="F:Acontep.TipoErroContraint.Constraint">
            <summary>
            Violação de constraint. Ainda não está implementado.
            </summary>
        </member>
        <member name="F:Acontep.TipoErroContraint.NA">
            <summary>
            Sem identificação de violação
            </summary>
        </member>
        <member name="T:Acontep.TratamentoExcessao">
            <summary>
            Summary description for Excecoes
            </summary>
        </member>
        <member name="M:Acontep.TratamentoExcessao.Tratar(System.Exception,System.String@)">
            <summary>
            Método para tratar a exceção
            </summary>
            <param name="excecao">Exceção</param>
            <param name="mensagem"></param>
            <returns>Indicativo se a exceção foi tratada com sucesso ou não</returns>
        </member>
        <member name="M:Acontep.TratamentoExcessao.TratarSqlException(System.Data.SqlClient.SqlException,System.String@)">
            <summary>
            Tratamento de exceções SqlException
            </summary>
            <param name="excecao"></param>
            <param name="mensagem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.TratamentoExcessao.ObterMensagemConstrantPadrao(System.Data.SqlClient.SqlException)">
            <summary>
            Obtem (gera) a mensagem padrão para a exceção
            </summary>
            <param name="excecao">Exceção</param>
            <returns>Mensagem padrão para a exceção</returns>
        </member>
        <member name="M:Acontep.TratamentoExcessao.ObterMensagemConstrant(System.String,Acontep.TipoErroContraint)">
            <summary>
            Recupera a mensagem armazenada no banco de dados para a constraint fornecida
            Tabela: ConstrInfo
            </summary>
            <param name="constraint">Nome da constraint</param>
            <returns>Mensagem da constraint</returns>
            <param name="tipo">Tipo da constraint</param>
        </member>
        <member name="M:Acontep.TratamentoExcessao.ObterNomeConstraint(System.String,System.Int32)">
            <summary>
            Obtem o nome da constraint contido na mensagem da exceção
            </summary>
            <param name="message">Mensagem da exceção</param>
            <param name="number">número da exceção retornado pelo Sql Server</param>
            <returns></returns>
        </member>
        <member name="M:Acontep.TratamentoExcessao.ExtrairNomeConstraint(System.String,System.String,System.Char)">
            <summary>
            Extrai o nome da constraint
            </summary>
            <param name="inicioMensagem">parte inicial (fixa) da mensagem</param>
            <param name="message">mensagem da exceção</param>
            <param name="delimitador">delimitidor do nome da constraint na mensagem de exceção</param>
            <returns></returns>
        </member>
        <member name="T:Acontep.Mensagens.Mensagens">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Acontep.Mensagens.Mensagens.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Acontep.Mensagens.Mensagens.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Acontep.Mensagens.Mensagens.ErroLoginInvalido">
            <summary>
              Looks up a localized string similar to Acesso solicitado invalido.
            </summary>
        </member>
        <member name="P:Acontep.Mensagens.Mensagens.ErroNovoEscopoRequerido">
            <summary>
              Looks up a localized string similar to A opção de escopo da transação requer um novo escopo de execução..
            </summary>
        </member>
        <member name="P:Acontep.Mensagens.Mensagens.ErroTipoDadoAplicacaoInvalido">
            <summary>
              Looks up a localized string similar to O tipo de dado informado é invalido para a {0}.
            </summary>
        </member>
        <member name="P:Acontep.Mensagens.Mensagens.ErroTransacaoRequerNovoEscopo">
            <summary>
              Looks up a localized string similar to Não é possível iniciar uma nova transação se já existir um escopo, favor selecionar OpcaoEscopo.RequerNovo.
            </summary>
        </member>
        <member name="P:Acontep.Mensagens.Mensagens.ErroValorNulo">
            <summary>
              Looks up a localized string similar to O valor informado para {0} não pode ser nulo.
            </summary>
        </member>
        <member name="T:Acontep.Diagnostico.EmailTraceListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Diagnostico.EmailTraceListener.Write(System.String)">
            <summary>
            Sends an email message given a predefined string
            </summary>
            <param name="message">The string to write as the email message</param>
        </member>
        <member name="M:Acontep.Diagnostico.EmailTraceListener.WriteLine(System.String)">
            <summary>
            Sends an email message given a predefined string
            </summary>
            <param name="message">The string to write as the email message</param>
        </member>
        <member name="M:Acontep.Diagnostico.EmailTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Delivers the trace data as an email message.
            </summary>
            <param name="eventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
        </member>
        <member name="T:Acontep.Conversao">
            <summary>
            Metodos de conversao
            </summary>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String)">
            <summary>
            Conversao para o tipo <typeparamref name="T"/> aceitando ou nao nulo se nulo for permitido
            </summary>
            <typeparam name="T">Tipo a ser convertido</typeparam>
            <param name="valor">Valor a ser convertido</param>
            <param name="rotuloMensagemErro">Rotulo usado na mensagem de erro se a conversao nao for possivel</param>
            <returns><paramref name="valor"/> convertido para o tipo <typeparamref name="T"/></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="larguraIgual"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <param name="larguraIgual"></param>
            <param name="valorIgual"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <param name="larguraIgual"></param>
            <param name="valorMinimo"></param>
            <param name="valorMaximo"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="requerido"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="requerido"></param>
            <param name="larguraIgual"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="requerido"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="requerido"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <param name="larguraIgual"></param>
            <param name="valorIgual"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.Para``1(System.Object,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="requerido"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <param name="larguraIgual"></param>
            <param name="valorMinimo"></param>
            <param name="valorMaximo"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="larguraIgual"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <param name="larguraIgual"></param>
            <param name="valorIgual"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <param name="larguraIgual"></param>
            <param name="valorMinimo"></param>
            <param name="valorMaximo"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="requerido"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="requerido"></param>
            <param name="larguraIgual"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="requerido"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="requerido"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <param name="larguraIgual"></param>
            <param name="valorIgual"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Conversao.TentarPara``1(System.Object,System.String,``0@,System.String@,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valor"></param>
            <param name="rotuloMensagemErro"></param>
            <param name="valorConvertido"></param>
            <param name="mensagemErro"></param>
            <param name="requerido"></param>
            <param name="larguraMinima"></param>
            <param name="larguraMaxima"></param>
            <param name="larguraIgual"></param>
            <param name="valorMinimo"></param>
            <param name="valorMaximo"></param>
            <returns></returns>
        </member>
        <member name="T:Acontep.Validacoes.CadastrosValidacao">
            <summary>
            Validacoes e testes de escopo geral
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.CadastrosValidacao.EhCEP(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.CadastrosValidacao.EhTelefone(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.CadastrosValidacao.ValidarCEP(System.Object,Acontep.Validacoes.ValidacaoEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.CadastrosValidacao.ValidarTelefone(System.Object,Acontep.Validacoes.ValidacaoEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Acontep.Seguranca.ContextoAutenticacao">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Seguranca.ContextoAutenticacao.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Seguranca.ContextoAutenticacao.Principal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Seguranca.ContextoAutenticacao.Identity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Seguranca.ContextoAutenticacao.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Acontep.Validacoes.TipoValidacao">
            <summary>
            Tipos de validacoes aplicaveis em <see cref="T:Acontep.Validacoes.Validacao"/>
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.Requerido">
            <summary>
            Validar se existe um valor
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.ValorIgual">
            <summary>
            Validar se valor igual
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.ValorMinimo">
            <summary>
            Validar se o valor é maior que o valor minimo
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.ValorMaximo">
            <summary>
            Validar se o valor é menor que o valor maximo
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.ValorMinimoIgual">
            <summary>
            Validar se o valor é maior ou igual ao valor minimo
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.ValorMaximoIgual">
            <summary>
            Validar se o valor é menor ou igual ao valor maximo
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.ValorContido">
            <summary>
            Validar se o valor está contido mas não é igual aos valores do intervalo
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.ValorContidoInclusivo">
            <summary>
            Validar se o valor é menor ou igual aos valores do intervalo
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.LarguraIgual">
            <summary>
            Validar se a largura é igual
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.LarguraMinima">
            <summary>
            Validar se a largura é maior que a largura minima
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.LarguraMaxima">
            <summary>
            Validar se a largura é menor que a largura maxima
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.LarguraMinimaIgual">
            <summary>
            Validar se a largura é maior ou igual ao valor minima
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.LarguraMaximaIgual">
            <summary>
            Validar se a largura é menor ou igual ao valor maxima
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.LarguraContida">
            <summary>
            Validar se a largura está contida mas não é igual aos valores do intervalo
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.LarguraContidaInclusivo">
            <summary>
            Validar se a largura é menor ou igual aos valores do intervalo
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.Regex">
            <summary>
            Validacao usando expressao regular
            </summary>
        </member>
        <member name="F:Acontep.Validacoes.TipoValidacao.Customizada">
            <summary>
            Validacao customizada
            </summary>
        </member>
        <member name="T:Acontep.Escopo">
            <summary>
            Informações do escopo de execução da aplicação
            </summary>
            <remarks>Esta classe não é thread-safe</remarks>
        </member>
        <member name="M:Acontep.Escopo.op_Equality(Acontep.Escopo,Acontep.Escopo)">
            <summary>
            Compara igualdade usando <see cref="M:Acontep.Escopo.Equals(System.Object)"/> fazendo com que o resultado sempre seja
            baseado no escopo atual
            </summary>
            <param name="esquerda"></param>
            <param name="direita"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Escopo.op_Inequality(Acontep.Escopo,Acontep.Escopo)">
            <summary>
            Compara diferenca usando <see cref="M:Acontep.Escopo.Equals(System.Object)"/> fazendo com que o resultado sempre seja
            baseado no escopo atual
            </summary>
            <param name="esquerda"></param>
            <param name="direita"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Escopo.#ctor(Acontep.Escopo)">
            <summary>
            Copia o escopo informado para <see cref="P:Acontep.Escopo.Atual"/>
            </summary>
            <remarks>
            Geralmente usado em casos onde o escopo atual é usado em outras Threads para aproveitar 
            a mesma transacao por exemplo.
            </remarks>
            <param name="escopo"></param>
        </member>
        <member name="M:Acontep.Escopo.#ctor">
            <summary>
            Inicia um novo escopo de execução ou participa de um existente
            </summary>
        </member>
        <member name="M:Acontep.Escopo.#ctor(Acontep.OpcaoTransacao)">
            <summary>
            Inicia um novo escopo de execução ou participa de um existente
            </summary>
            <param name="opcaoTransacao">Opcao da transacao. Se for <see cref="F:Acontep.OpcaoTransacao.Requerido"/> 
            e ja existir um escopo, um novo escopo é criado de forma transparente</param>
        </member>
        <member name="M:Acontep.Escopo.#ctor(System.String,Acontep.OpcaoTransacao)">
            <summary>
            Inicia um novo escopo de execução ou participa de um existente
            </summary>
            <param name="nomeConfigConexao">Nome da conexao em connectionSettings</param>
            <param name="opcaoTransacao">Opcao da transacao. Se for <see cref="F:Acontep.OpcaoTransacao.Requerido"/> 
            e ja existir um escopo, um novo escopo é criado de forma transparente</param>
        </member>
        <member name="M:Acontep.Escopo.#ctor(Acontep.OpcaoEscopo,Acontep.OpcaoTransacao)">
            <summary>
            Inicia um novo escopo de execução ou participa de um existente
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="F:Acontep.OpcaoTransacao.Requerido"/> exige <see cref="F:Acontep.OpcaoEscopo.Requerido"/></exception>
            se um escopo ja existir sem uma transação ativa
            <param name="opcaoEscopo">Configura a forma como esse escopo vai participar de um ja existente</param>
            <param name="opcaoTransacao">Configura a forma como esse escopo vai participar de uma transação</param>
        </member>
        <member name="M:Acontep.Escopo.#ctor(Acontep.Dado.ContextoAcessoDado)">
            <summary>
            Inicia um novo escopo de execução com <paramref name="acessoDado"/>
            </summary>
            <param name="acessoDado">Inicia um escopo com este contexto de acesso a dado</param>
        </member>
        <member name="M:Acontep.Escopo.#ctor(Acontep.OpcaoEscopo,System.String,Acontep.OpcaoTransacao)">
            <summary>
            Inicia um novo escopo de execução ou participa de um existente
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="F:Acontep.OpcaoTransacao.Requerido"/> exige <see cref="F:Acontep.OpcaoEscopo.Requerido"/></exception>
            se um escopo ja existir sem uma transação ativa
            <param name="opcaoEscopo">Configura a forma como esse escopo vai participar de um ja existente</param>
            <param name="nomeConfigConexao">Nome da configuração de conexao em connectionStrings do arquivo de configuracao da aplicacao</param>
            <param name="opcaoTransacao">Configura a forma como esse escopo vai participar de uma transação</param>
        </member>
        <member name="F:Acontep.Escopo._EscopoAnterior">
            <summary>
            Escopo anterior na fila de escops dessa Thread
            </summary>
        </member>
        <member name="F:Acontep.Escopo._ContextoAcessoDado">
            <summary>
            <see cref="P:Acontep.Escopo.ContextoAcessoDado"/>
            </summary>
        </member>
        <member name="F:Acontep.Escopo._ContextoAutenticacao">
            <summary>
            <see cref="P:Acontep.Escopo.ContextoAutenticacao"/>
            </summary>
        </member>
        <member name="F:Acontep.Escopo._ContadorEscopo">
            <summary>
            Faz contagem de quantos objetos <see cref="T:Acontep.Escopo"/> foram instanciados dentro do escopo atual
            </summary>
        </member>
        <member name="F:Acontep.Escopo._MarcadoComoCompleto">
            <summary>
            Indicado se o trabalho do escopo foi terminado com sucesso
            </summary>
        </member>
        <member name="M:Acontep.Escopo.Terminar">
            <summary>
            Informa que o escopo atual chegou ao seu fim com sucesso.
            </summary>
            <remarks>
            Sempre deve ser o ultimo comando de uma clausula <c>using</c>. Se existe uma transacao no escopo
            atual a transação sofrerá um Commit se <c>Terminar</c> for chamado na raiz da hierarquia de escopos
            criados.
            A chamada a esse metodo deve ser a ultima linha antes da chamada do <see cref="M:Acontep.Escopo.Dispose(System.Boolean)"/>. Dessa
            forma, se ele for executado na raiz da árvore de escopos isso significa que nenhuma excessão ocorreu.
            </remarks>
        </member>
        <member name="M:Acontep.Escopo.GetHashCode">
            <summary>
            HashCode do escopo atual
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.Escopo.Equals(System.Object)">
            <summary>
            Verifica se <paramref name="obj"/> é igual ao escopo atual ja que a instancia corrente sempre é o
            escopo atual
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Escopo.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Acontep.Escopo.FinalizarContextoAcessoDado(Acontep.Dado.ContextoAcessoDado,System.Boolean)">
            <summary>
            Faz Commit na transacao se for necessario e chama <see cref="M:Acontep.Dado.ContextoAcessoDado.Dispose(System.Boolean)"/>
            </summary>
            <param name="contextoAcessoDado">Valor a sofrer o processo de finalizacao</param>
            <param name="marcadoComoCompleto"></param>
        </member>
        <member name="M:Acontep.Escopo.VerificarMudancaEscopo(Acontep.OpcaoEscopo,System.String,System.Boolean@)">
            <summary>
            Identifica se um escopo precisa ser mudado e também se ele pode ser mudado
            </summary>
            <param name="opcaoEscopo"></param>
            <param name="nomeConfigConexao"></param>
            <param name="precisaMudarEscopo"></param>
        </member>
        <member name="M:Acontep.Escopo.PrecisaMudarEscopo(Acontep.OpcaoEscopo)">
            <summary>
            Indica se <see cref="P:Acontep.Escopo.Atual"/> precisa ser mudado para um novo escopo
            </summary>
            <param name="opcaoEscopo"></param>
            <returns>True se um novo escopo precisa ser criado para <see cref="P:Acontep.Escopo.Atual"/></returns>
        </member>
        <member name="M:Acontep.Escopo.AtribuirEscopoAtual">
            <summary>
            Faz atribuicao do escopo atual com o valor desta instancia
            </summary>
        </member>
        <member name="M:Acontep.Escopo.ConfigurarTransacao(Acontep.OpcaoTransacao)">
            <summary>
            Inicializa propriedade <see cref="P:Acontep.Dado.ContextoAcessoDado.Transaction"/>
            </summary>
            <param name="opcaoTransacao"></param>
        </member>
        <member name="M:Acontep.Escopo.OpcaoTransacaoRequerNovoEscopo(Acontep.OpcaoTransacao)">
            <summary>
            Identifica se com a <paramref name="opcaoTransacao"/> informado um novo escopo deve ser criado
            para delimitar a vida util da transacao.
            </summary>
            <remarks>
            Se <see cref="F:Acontep.OpcaoTransacao.Requerido"/> for informado e <see cref="P:Acontep.Escopo.Atual"/> nao possuir
            uma transacao então um novo escopo deve ser criado para que ao fim dele o commit ou rollback ocorra.
            </remarks>
            <param name="opcaoTransacao"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Escopo.Atual">
            <summary>
            Escopo de execucao ativo
            </summary>
        </member>
        <member name="P:Acontep.Escopo.Identity">
            <summary>
            Identidado do usuario
            </summary>
        </member>
        <member name="P:Acontep.Escopo.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Escopo.Transaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Escopo.ContadorEscopo">
            <summary>
            Obtem o contador de escopo de instancias referente a <see cref="P:Acontep.Escopo.Atual"/>
            </summary>
        </member>
        <member name="P:Acontep.Escopo.MarcadoComoCompleto">
            <summary>
            Indica se <see cref="P:Acontep.Escopo.Atual"/> foi marcado como finalizado com sucesso. So surte
            efeito se estivermos lidando com o Escopo raiz de uma hierarquia de escopos
            </summary>
            <remarks>
            Apenas se a ultima linha do primeiro escopo iniciado a atribuicao de finalizado com sucesso
            ser valida
            </remarks>
        </member>
        <member name="P:Acontep.Escopo.ContextoAcessoDado">
            <summary>
            Informacoes relevantes a acesso a dados para o escopo
            </summary>
            <remarks>
            Sempre fornece uma conexao aberta
            </remarks>
        </member>
        <member name="P:Acontep.Escopo.ContextoAutenticacao">
            <summary>
            Informacoes relevantes a autenticacao para o escopo
            </summary>
        </member>
        <member name="P:Acontep.Escopo.MensagemErroObjectDisposedException">
            <summary>
            Valor da mensagem de erro de <see cref="T:System.ObjectDisposedException"/>
            </summary>
        </member>
        <member name="T:Acontep.ErroResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Acontep.ErroResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Acontep.ErroResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Acontep.ErroResource.LoginInvalido">
            <summary>
              Looks up a localized string similar to Acesso solicitado inválido..
            </summary>
        </member>
        <member name="P:Acontep.ErroResource.OperacaoErro">
            <summary>
              Looks up a localized string similar to Não foi possivel realizar a operação..
            </summary>
        </member>
        <member name="P:Acontep.ErroResource.SelecioneItem">
            <summary>
              Looks up a localized string similar to Selecione um item.
            </summary>
        </member>
        <member name="P:Acontep.ErroResource.TipoDadoAplicacaoInvalido">
            <summary>
              Looks up a localized string similar to O tipo de dado informado é invalido para a {0}..
            </summary>
        </member>
        <member name="T:Acontep.Dado.TipoCommandDataAdapter">
            <summary>
            Indica qual é a propriedade que o <see cref="T:Acontep.Dado.BdUtil"/> vai configurar do <see cref="P:Acontep.Dado.BdUtil.DataAdapter"/>
            quando configurando parametros e texto do command.
            </summary>
            <remarks>
            Com essa opção pode-se configurar 
            </remarks>
        </member>
        <member name="F:Acontep.Dado.TipoCommandDataAdapter.Select">
            <summary>
            Operação SELECT. Esse é o padrão
            </summary>
        </member>
        <member name="F:Acontep.Dado.TipoCommandDataAdapter.Insert">
            <summary>
            Operação INSERT
            </summary>
        </member>
        <member name="F:Acontep.Dado.TipoCommandDataAdapter.Update">
            <summary>
            Operação UPDATE
            </summary>
        </member>
        <member name="F:Acontep.Dado.TipoCommandDataAdapter.Delete">
            <summary>
            Operação DELETE
            </summary>
        </member>
        <member name="T:Acontep.Seguranca.CriptSenha">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Seguranca.CriptSenha.TesteCript(System.String)">
            <summary>
            Nome: TesteCript
            Desenvolvido: Breno Marques Data:24/01/2002
            Atualizado: Data:
            Descrição: Método para testar se o valor pode ou não ser criptografado.
            </summary>
            <param name="pValor">Informa o valor que deve ser criptografado.</param>
            <returns>Retorna Verdadeiro ou Falso.</returns>		
        </member>
        <member name="M:Acontep.Seguranca.CriptSenha.EmCript(System.String)">
            <summary>
            Nome: EmCript
            Desenvolvido: Breno Marques Data:24/01/2002
            Atualizado: Data:
            Descrição: Método para criptografar uma senha.
            </summary>
            <param name="pValor">Informa o valor que deve ser retornado por extenso.</param>
            <returns>Retorna com o valor criptografado.</returns>		
        </member>
        <member name="M:Acontep.Seguranca.CriptSenha.DesCript(System.String)">
            <summary>
            Nome: DesCript
            Desenvolvido: Breno Marques Data:24/01/2002
            Atualizado: Data:
            Descrição: Método para descriptografar uma senha.
            </summary>
            <param name="pValor">Informa o valor que deve ser retornado por extenso.</param>
            <returns>Retorna com o valor pro extenso.</returns>		
        </member>
        <member name="T:Acontep.Validacoes.FiscalValidacao">
            <summary>
            Validacoes e testes fiscais ( cnpj, inscrição estadual e etc)
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.ConsisteInscricaoEstadual(System.String,System.String)">
            <summary>
            Importacao da DLL com validacao da inscricao estadual
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.EhInscricaoEstadual(System.String,System.String)">
            <summary>
            Verifica validade da inscricao estadual para a unidade federativa informada
            </summary>
            <param name="valor">Valor da inscricao estadual</param>
            <param name="UF">Unidade federativa a que inscricao estadual pertence</param>
            <returns>Verdadeiro se a inscricao e valida ou falso caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.EhCnpj(System.Int64)">
            <summary>
            Verifica validade do cnpj/cnpj
            </summary>
            <param name="valor">cnpj/cnpj a ser validado</param>
            <returns>Verdadeiro se o cnpj/cnpj e valido ou falso caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.EhCnpj(System.String)">
            <summary>
            Verifica validade do cnpj/cnpj
            </summary>
            <param name="valor">cnpj/cnpj a ser validado</param>
            <returns>Verdadeiro se o cnpj/cnpj e valido ou falso caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.EhCpf(System.Int64)">
            <summary>
            Verifica validade do cpf
            </summary>
            <param name="valor">ccpf a ser validado</param>
            <returns>Verdadeiro se o cpf e valido ou falso caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.EhCpf(System.String)">
            <summary>
            Verifica validade do cpf
            </summary>
            <param name="valor">cpf a ser validado</param>
            <returns>Verdadeiro se o cpf e valido ou falso caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.EhCnpjCpf(System.String)">
            <summary>
            Verifica validade do cpf ou do cnpj/cnpj
            </summary>
            <param name="valor">cpf ou do cnpj/cnpj a ser validado</param>
            <returns>Verdadeiro se o cpf ou do cnpj/cnpj e valido ou falso caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.ValidarCnpjCpf(System.Object,Acontep.Validacoes.ValidacaoEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.ValidarCnpj(System.Object,Acontep.Validacoes.ValidacaoEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Acontep.Validacoes.FiscalValidacao.ValidarCpf(System.Object,Acontep.Validacoes.ValidacaoEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Acontep.Validacoes.Validacao`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Acontep.Validacoes.Validacao">
            <summary>
            Classe para validacoes rotineiras de dados
            </summary>    
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ConfigValorValidacao(System.Nullable{System.Int32},Acontep.Validacoes.TipoValidacao,Acontep.Validacoes.TipoValidacao)">
            <summary>
            
            </summary>
            <param name="valor"></param>
            <param name="adicionarSeNotNull"></param>
            <param name="removerSeNull"></param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ObterValorString(System.Object)">
            <summary>
            Obtem uma string correspondente ao valor informado, usando <see cref="P:Acontep.Validacoes.Validacao.FormatProvider"/> se existir
            </summary>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ObterValorConvertido(System.Object)">
            <summary>
            Converte quando necessario o valor sendo validado para o tipo correto definido em <see cref="P:Acontep.Validacoes.Validacao.DataType"/>, usando <see cref="P:Acontep.Validacoes.Validacao.FormatProvider"/>
            </summary>
            <param name="valor">Valor a ser convertido</param>
            <returns>Valor convertido</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.FazConversaoTipo(System.Object)">
            <summary>
            Faz o conversao para o tipo de dado esperado, formatando ele se necessario, usando <see cref="P:Acontep.Validacoes.Validacao.FormatProvider"/>
            </summary>
            <param name="valor">Valor a ser convertido</param>
            <returns>Valor convertido</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ObterDataTypeReal(System.Type)">
            <summary>
            Obtem o tipo de dado a partir de <see cref="P:Acontep.Validacoes.Validacao.DataType"/>. Se estivermos trabalhando com 
            <see cref="T:System.Nullable"/> entao obtem o tipo real
            trabalhando nullable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.FazerValidacaoIntervaloValores(System.Object,System.String@)">
            <summary>
            Faz a validacao para intervalos de valores especificado
            </summary>
            <param name="value">Valor sendo validado</param>
            <param name="mensagem">Mensagem de erro se o <paramref name="value"/> estiver fora do intervalo válido</param>
            <returns>True se <paramref name="value"/> possui um valor em um intervalo válido, false caso contrário</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.FazerValidacaoIntervaloLargura(System.Object,System.String@)">
            <summary>
            Faz a validacao para intervalos de quantidade de caracteres/digitos especificado
            </summary>
            <param name="valor">Valor sendo validado</param>
            <param name="mensagem">Mensagem de erro se o <paramref name="valor"/> estiver fora do intervalo válido</param>
            <returns>True se <paramref name="valor"/> possui uma largura valida, false caso contrário</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.FazerValidacaoGeral(System.Object@)">
            <summary>
            Retorna texto descritivo com informacoes da validacao do valor
            </summary>
            <param name="valor">Valor a ser validado</param>
            <returns>Erro ocorrido ou <c>String.Empty</c> se o valor esta correto</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ObterMensagemErro(System.String)">
            <summary>
            Obtem mensagem de erro identificada ou uma mensagem customizada se existir uma definida
            </summary>
            <param name="mensagem"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.Validar(System.Object@)">
            <summary>
            
            </summary>
            <exception cref="T:Acontep.Validacoes.ValorInvalidoException">O valor informado não é válido</exception>
            <param name="valor"></param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ContemTipoValidacao(Acontep.Validacoes.TipoValidacao,Acontep.Validacoes.TipoValidacao)">
            <summary>
            Verifica se <paramref name="origem"/> contem o <paramref name="contido"/>
            </summary>
            <param name="origem">Tipos de validacoes</param>
            <param name="contido">Tipo de validacao a ser verificado se existem em <paramref name="origem"/></param>
            <returns>True se <paramref name="origem"/> contem <paramref name="contido"/></returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ContemQualquerTipoValidacao(Acontep.Validacoes.TipoValidacao,Acontep.Validacoes.TipoValidacao)">
            <summary>
            Verifica se <paramref name="origem"/> contem qualquer um dos valores informados em <paramref name="contido"/>
            </summary>
            <param name="origem">Tipos de validacoes</param>
            <param name="contido">Tipos de validacoes a ser verificado se existem em <paramref name="origem"/></param>
            <returns>True se <paramref name="origem"/> contem <paramref name="contido"/></returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ValidarSePossuiValorParaTipoValidacao(Acontep.Validacoes.TipoValidacao)">
            <summary>
            Provoca um exception se, para qualquer tipo de validacao, nao existir valor
            na propriedade correspondente.
            </summary>
            <param name="novo"></param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ObterTiposIncompativeisLarg(Acontep.Validacoes.TipoValidacao)">
            <summary>
            Retornar todos os tipos de validacao icompativeis com <see cref="P:Acontep.Validacoes.Validacao.TipoValidacao"/>
            </summary>
            <param name="tipo">Tipo a se obter incompatibilidade</param>
            <returns>Tipos de validacao</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ObterTiposIncompativeisInterv(Acontep.Validacoes.TipoValidacao)">
            <summary>
            Retornar todos os tipos de validacao icompativeis com <see cref="P:Acontep.Validacoes.Validacao.TipoValidacao"/>
            </summary>
            <param name="tipo">Tipo a se obter incompatibilidade</param>
            <returns>Tipos de validacao</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ValidacaoPorIntervaloValoresEhPossivel(Acontep.Validacoes.TipoValidacao,System.Type)">
            <summary>
            Validacao casos onde a validacao por intervalo é solicitada mas o tipo de dado nao da suporte a comparacoes
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ConfigParaIntervaloValorValido(System.Object@)">
            <summary>
            Configura o valor da instância para um tipo compatível com o tipo de dado sendo validado
            </summary>
            <exception cref="T:System.ApplicationException">O tipo de dado não é compatível com o <see cref="P:Acontep.Validacoes.Validacao.DataType"/></exception>
            <param name="value">Valor a ser verificado se possui tipo contivel</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ConfigValoresMinimoMaximo(System.Object@,Acontep.Validacoes.TipoValidacao,Acontep.Validacoes.TipoValidacao)">
            <summary>
            Configuracao e validacao para valores maximo e minimo
            </summary>
            <param name="value"></param>
            <param name="adicionarSeNotNull">Valor a ser adicionado a <see cref="P:Acontep.Validacoes.Validacao.TipoValidacao"/> se <paramref name="valorLargura"/> for diferente de <c>null</c></param>
            <param name="removerSeNull">Valor a ser removido de <see cref="P:Acontep.Validacoes.Validacao.TipoValidacao"/> se <paramref name="valorLargura"/> for <c>null</c></param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ConfigLarguraMinimaMaxima(System.Nullable{System.Int32},Acontep.Validacoes.TipoValidacao,Acontep.Validacoes.TipoValidacao)">
            <summary>
            Configuracao e validacao para largura maxima e minima
            </summary>
            <param name="value">Valor</param>
            <param name="adicionarSeNotNull">Valor a ser adicionado a <see cref="P:Acontep.Validacoes.Validacao.TipoValidacao"/> se <paramref name="valorLargura"/> for diferente de <c>null</c></param>
            <param name="removerSeNull">Valor a ser removido de <see cref="P:Acontep.Validacoes.Validacao.TipoValidacao"/> se <paramref name="valorLargura"/> for <c>null</c></param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Construtor de Validacao
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="dataType">Tipo do dado a ser validado</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.#ctor(System.String,System.Type,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Construtor de Validacao
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="dataType">Tipo do dado a ser validado</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.#ctor(System.String,System.Type,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Construtor de Validacao
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="dataType">Tipo do dado a ser validado</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.#ctor(System.String,System.Type,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
            <summary>
            Construtor de Validacao
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="dataType">Tipo do dado a ser validado</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorIgual">Valor que o valor sendo validado deve ter</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.#ctor(System.String,System.Type,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object)">
            <summary>
            Construtor de Validacao
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="dataType">Tipo do dado a ser validado</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorMinimo">Valor mínimo do valor sendo validado</param>
            <param name="valorMaximo">Valor máximo do valor sendo validado</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.#ctor(System.String,System.Type,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object,System.Object,System.IFormatProvider,System.String)">
            <summary>
            Construtor de Validacao
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="valorMinimo"/> ou <paramref name="valorMaximo"/> possuem valor e <paramref name="valorIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="dataType">Tipo do dado a ser validado</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorMinimo">Valor mínimo do valor sendo validado</param>
            <param name="valorMaximo">Valor máximo do valor sendo validado</param>
            <param name="valorIgual">Valor que o valor sendo validado deve ter</param>
            <param name="formatProvider">Provider de formatacao usado quando convertendo o valor ou quando exibindo os valores minimo e maximo</param>
            <param name="regexPattern">Padrao de validação usando o regex</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.AtribuirTipoValidacao(Acontep.Validacoes.TipoValidacao)">
            <summary>
            Adiciona um tipo de validacao a essa instancia
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.RemoverTipoValidacao(Acontep.Validacoes.TipoValidacao)">
            <summary>
            Remove um tipo de validacao dessa instancia
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.EhValido(System.Object)">
            <summary>
            Retorna um boolean se o valor for valido dentro das configuracoes do objeto
            </summary>
            <param name="valor">Valor a ser validado</param>
            <returns>True se o valor foi valido, fale caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.EhValido(System.Object,System.String@)">
            <summary>
            Retorna um boolean se o valor for valido dentro das configuracoes da classe
            </summary>
            <param name="valor">valor a ser validado</param>
            <param name="mensagemErro">mensagem indicando o erro ocorrido</param>
            <returns>True se o valor for valido, false caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.Validar(System.Object)">
            <summary>
            Valida o valor passado como parametro
            </summary>
            <exception cref="T:Acontep.Validacoes.ValorInvalidoException">O valor informado não é válido de acordo com as regras configuradas</exception>
            <param name="valor">Valor a ser validado</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.ObterMensagemValidacao(System.Object)">
            <summary>
            Retorna texto descritivo com informacoes da validacao do valor
            </summary>
            <param name="valor">Valor a ser validado</param>
            <returns>Erro ocorrido ou <c>String.Empty</c> se o valor esta correto</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao.Converter(System.Object)">
            <summary>
            Usando as regras definidas valida e converte para o tipo configurado o valor passado como parametro
            </summary>
            <param name="valor">Valor a ser convertido</param>
            <returns>Valor convertido</returns>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.RotuloMensagemErro">
            <summary>
            Rotulo usado para compor as mensagens de erros se <see cref="P:Acontep.Validacoes.Validacao.MensagemCustomizada"/> não for definida
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.MensagemCustomizada">
            <summary>
            Define uma mensagem customizada para qualquer erro encontrado no processo de validação. Atribuia null ou <see cref="F:System.String.Empty"/>
            para desabilitar.
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.DataType">
            <summary>
            Tipo de dado valido
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.Requerido">
            <summary>
            Indica se um valor diferente de null é necessário para a validação da classe
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.FormatProvider">
            <summary>
            Prove um mecanismo de controlar a formatacao
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.ValorIgual">
            <summary>
            O valor precisa ser igual ao valor indicado
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.ValorMinimo">
            <summary>
            O valor mínimo o valor sendo validado deve ter
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.ValorMaximo">
            <summary>
            O valor máximo o valor sendo validado deve ter
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.LarguraIgual">
            <summary>
            Quantidade de caracteres/digito que o valor sendo validado deve conter
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.LarguraMinima">
            <summary>
            Quantidade de caracteres/digito minima do valor sendo validado
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.LarguraMaxima">
            <summary>
            Quantidade de caracteres/digito maxima do valor sendo validado
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.Regex">
            <summary>
            Expressao regular usada para validar o valor
            </summary>
        </member>
        <member name="E:Acontep.Validacoes.Validacao.ValidandoValor">
            <summary>
            Essa é o evento executado quando fazendo uma validacao <see cref="F:Acontep.Validacoes.TipoValidacao.Customizada"/>
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.Validacao.TipoValidacao">
            <summary>
            Contem o tipo de validacao que deve ser feita em um valor informado
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String)">
            <summary>
            Construtor de Validacao indicando se requerido se <typeparamref name="T"/> não aceitar valor <c>null</c>
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Construtor de Validacao indicando se requerido se <typeparamref name="T"/> não aceitar valor <c>null</c>
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Construtor de Validacao indicando se requerido se <typeparamref name="T"/> não aceitar valor <c>null</c>
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
            <summary>
            Construtor de Validacao indicando se requerido se <typeparamref name="T"/> não aceitar valor <c>null</c>
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorIgual">Valor que o valor sendo validado deve ter</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object)">
            <summary>
            Construtor de Validacao indicando se requerido se <typeparamref name="T"/> não aceitar valor <c>null</c>
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorMinimo">Valor mínimo do valor sendo validado</param>
            <param name="valorMaximo">Valor máximo do valor sendo validado</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object,System.Object,System.IFormatProvider,System.String)">
            <summary>
            Construtor de Validacao indicando se requerido se <typeparamref name="T"/> não aceitar valor <c>null</c>
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="valorMinimo"/> ou <paramref name="valorMaximo"/> possuem valor e <paramref name="valorIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorMinimo">Valor mínimo do valor sendo validado</param>
            <param name="valorMaximo">Valor máximo do valor sendo validado</param>
            <param name="valorIgual">Valor que o valor sendo validado deve ter</param>
            <param name="formatProvider">Provider de formatacao usado quando convertendo o valor ou quando exibindo os valores minimo e maximo</param>
            <param name="regexPattern">Padrao de validação usando o regex</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Boolean)">
            <summary>
            Construtor de Validacao
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Construtor de Validacao
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Construtor de Validacao
            </summary>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
            <summary>
            Construtor de Validacao
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorIgual">Valor que o valor sendo validado deve ter</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object)">
            <summary>
            Construtor de Validacao
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorMinimo">Valor mínimo do valor sendo validado</param>
            <param name="valorMaximo">Valor máximo do valor sendo validado</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.#ctor(System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Object,System.Object,System.IFormatProvider,System.String)">
            <summary>
            Construtor de Validacao
            </summary>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="larguraMinima"/> ou <paramref name="larguraMaxima"/> possuem valor e <paramref name="larguraIgual"/> também possui valor</exception>
            <exception cref="T:System.ArgumentException">Os parametros <paramref name="valorMinimo"/> ou <paramref name="valorMaximo"/> possuem valor e <paramref name="valorIgual"/> também possui valor</exception>
            <param name="rotuloMensagemErro">Rotulo usado para indentificar os campos usando as mensagens de erro.</param>
            <param name="requerido">Indica se o valor precisa ser diferente de <c>null</c></param>
            <param name="larguraMinima">Quantidade de carcteres/dígito mínimo do valor sendo validado</param>
            <param name="larguraMaxima">Quantidade de carcteres/dígito máximo do valor sendo validado</param>
            <param name="larguraIgual">Quantidade de carcteres/dígito que o valor sendo validado deve ter</param>
            <param name="valorMinimo">Valor mínimo do valor sendo validado</param>
            <param name="valorMaximo">Valor máximo do valor sendo validado</param>
            <param name="valorIgual">Valor que o valor sendo validado deve ter</param>
            <param name="formatProvider">Provider de formatacao usado quando convertendo o valor ou quando exibindo os valores minimo e maximo</param>
            <param name="regexPattern">Padrao de validação usando o regex</param>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.TentarConverter(System.Object,`0@,System.String@)">
            <summary>
            Retorna um boolean indicando se o valor for valido dentro das configuracoes da classe
            </summary>
            <param name="valor">Valor a ser validado</param>
            <param name="resultado">Valor convertido se <paramref name="valor"/> é válido, ou o valor default
            caso contrario</param>
            <param name="mensagemErro">Mensagem indicando o erro ocorrido</param>
            <returns>True se o valor foi valido, false caso contrario</returns>
        </member>
        <member name="M:Acontep.Validacoes.Validacao`1.Converter(System.Object)">
            <summary>
            Usando as regras definidas valida e converte o valor passado como parametro
            </summary>
            <param name="valor">Valor a ser convertido</param>
            <returns>Valor convertido</returns>
        </member>
        <member name="T:Acontep.Validacoes.ValidacaoDataTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoDataTable.#ctor(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoDataTable.ObterValidacaoDataTable(System.Data.DataTable)">
            <summary>
            Obtem a instancia de <see cref="T:Acontep.Validacoes.ValidacaoDataTable"/> associada a um <see cref="T:System.Data.DataTable"/>
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoDataTable.FazerValidacao">
            <summary>
            Valida todas as colunas de todas as linhas do <see cref="T:System.Data.DataTable"/>
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoDataTable.FazerValidacao(System.Data.DataRow)">
            <summary>
            Valida todas as colunas da linha passada como parametro
            </summary>
            <param name="dataRow"></param>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoDataTable.FazerValidacao(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Valida a coluna informada da linha passada como parametro
            </summary>
            <param name="dataRow"></param>
            <param name="dataColumn"></param>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoDataTable.Item(System.Data.DataColumn)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoDataTable.Item(System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoDataTable.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoDataTable.ValidacaoExtendProperty">
            <summary>
            Nome da propriedade extendida do <see cref="T:System.Data.DataTable"/> que contem
            <c>ValidacaoDataTable</c>
            </summary>
        </member>
        <member name="T:Acontep.AcessoInvalidoException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.AcessoInvalidoException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.AcessoInvalidoException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Acontep.AcessoInvalidoException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Acontep.AcessoInvalidoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Acontep.IO.HelpZip">
            <summary>
            Summary description for HelpZip.
            </summary>
        </member>
        <member name="M:Acontep.IO.HelpZip.ZipFile(System.String,System.String,System.Boolean)">
            <summary>
            Zipa um Arquivo ou um diretorio
            </summary>
            <param name="pOrigem">Informa um arquivo ou diretorio a ser zipado</param>
            <param name="pArquivoDestino">Informa o nome do arquivo zipado</param>
            <param name="MantarEstruturaPastas">Se true mantem a hierarquia original de pastas, caso contrario compacta tudo em um unico nivel no arquivo zipado</param>
        </member>
        <member name="M:Acontep.IO.HelpZip.ZipFile(System.String[],System.String)">
            <summary>
            Zipa os arquivos
            </summary>
            <param name="lstfilenames">lista de arquivos</param>
            <param name="pArquivoDestino">arquivo de destino(arquivo compactado)</param>
        </member>
        <member name="M:Acontep.IO.HelpZip.ZipFile(System.String[],System.String,System.Boolean)">
            <summary>
            Zipa os arquivos
            </summary>
            <param name="lstfilenames">lista de arquivos</param>
            <param name="pArquivoDestino">arquivo de destino(arquivo compactado)</param>
            <param name="MantarEstruturaPastas">Mantem toda a estrutura de pasta onde os arquivos estão</param>
        </member>
        <member name="M:Acontep.IO.HelpZip.ZipFile(System.String,System.String)">
            <summary>
            Zipa um Arquivo ou um diretorio
            </summary>
            <param name="pOrigem">Informa um arquivo ou diretorio a ser zipado</param>
            <param name="pArquivoDestino">Informa o nome do arquivo zipado</param>
        </member>
        <member name="M:Acontep.IO.HelpZip.ZipFile(System.IO.Stream,System.String,System.String)">
            <summary>
            Zipa os dados
            </summary>
            <param name="pDadosOrigem">Dados a serem compactados</param>
            <param name="pNomeArquivoOrigem">Nome do aquivo atribuidos aso dados</param>
            <param name="pNomeArquivoDestino">arquivo de destino(arquivo compactado)</param>
            <returns></returns>
        </member>
        <member name="M:Acontep.IO.HelpZip.UnZip(System.String,System.String)">
            <summary>
            Desconpacta o arquivo
            </summary>
            <param name="pArquivoZipado">caminho ao arquivo a ser descompactado</param>
            <param name="pDiretorioDestino">diretorio de destino dos arquivos descompactados</param>
        </member>
        <member name="M:Acontep.IO.HelpZip.UnZip(System.String,System.String,System.Boolean)">
            <summary>
            Desconpacta o arquivo
            </summary>
            <param name="pArquivoZipado">caminho ao arquivo a ser descompactado</param>
            <param name="pDiretorioDestino">diretorio de destino dos arquivos descompactados</param>
            <param name="mesmaPasta"></param>
        </member>
        <member name="M:Acontep.IO.HelpZip.UnZip(System.IO.FileStream,System.String)">
            <summary>
            Desconpacta o arquivo
            </summary>
            <param name="File">stream do arquivo a ser descompactado</param>
            <param name="pDiretorioDestino">diretorio de destino dos arquivos descompactados</param>
        </member>
        <member name="M:Acontep.IO.HelpZip.UnZip(System.IO.FileStream,System.Boolean,System.String)">
            <summary>
            Desconpacta o arquivo
            </summary>
            <param name="File">stream do arquivo a ser descompactado</param>
            <param name="mesmaPasta">define se descompacta os ignorando a estrutura de pastas do arquivo compactado e colocando no <paramref name="pDiretorioDestino"/></param>
            <param name="pDiretorioDestino">diretorio de destino dos arquivos descompactados</param>
        </member>
        <member name="M:Acontep.IO.HelpZip.UnZip(System.IO.FileStream,System.String,System.Boolean)">
            <summary>
            Desconpacta o arquivo
            </summary>
            <param name="arquivo">stream do arquivo a ser descompactado</param>
            <param name="pDiretorioDestino">diretorio de destino dos arquivos descompactados</param>
            <param name="CloseFile">define se o stream do arquivo deve ser fechado apos a descompactação</param>
        </member>
        <member name="M:Acontep.IO.HelpZip.UnZip(System.IO.FileStream,System.String,System.Boolean,System.Boolean)">
            <summary>
            Desconpacta o arquivo
            </summary>
            <param name="arquivo"> stream do arquivo a ser descompactado</param>
            <param name="pDiretorioDestino">diretorio de destino dos arquivos descompactados</param>
            <param name="CloseFile">define se o stream do arquivo deve ser fechado apos a descompactação</param>
            <param name="mesmaPasta">define se descompacta os ignorando a estrutura de pastas do arquivo compactado e colocando no <paramref name="pDiretorioDestino"/> </param>
        </member>
        <member name="M:Acontep.IO.HelpZip.UnZipCCFV(System.String,System.String)">
            <summary>
            Desconpacta o arquivo
            </summary>
            <param name="pArquivoZipado">caminho ao arquivo a ser descompactado</param>
            <param name="pDiretorioDestino">diretorio de destino dos arquivos descompactados</param>
        </member>
        <member name="T:Acontep.AcessoDados">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.AcessoDados.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.AcessoDados.QuandoIniciando">
            <summary>
            
            </summary>
        </member>
        <member name="E:Acontep.AcessoDados.Iniciando">
            <summary>
            
            </summary>
        </member>
        <member name="T:Acontep.Net.Mail.AcontepSmtpClient">
            <summary>
            Cliente de SMTP extendido para as necessidades do Acontep
            </summary>
        </member>
        <member name="M:Acontep.Net.Mail.AcontepSmtpClient.Send(System.Net.Mail.MailMessage)">
            <summary>
            Envia e-mial usando os paramteros passoa por mailMessage
            </summary>
            <param name="mailMesasge">e-mail a ser enviado</param>
        </member>
        <member name="M:Acontep.Net.Mail.AcontepSmtpClient.Send(System.Net.Mail.MailMessage,System.Net.Mail.SendCompletedEventHandler)">
            <summary>
            Envia e-mial usando os paramteros passoa por mailMessage 
            com a possibilidade de chamada a evento apos o envio
            </summary>
            <param name="mailMesasge">e-mail a ser enviado</param>
            <param name="sendCompleted">evento vinculado a ser disparado ao terminio do envio</param>
        </member>
        <member name="M:Acontep.Net.Mail.AcontepSmtpClient.Send(System.String)">
            <summary>
            Overload para uso facilitado da classe de Log
            </summary>
            <param name="mensagem">mensagem formatada para envio</param>
        </member>
        <member name="T:Acontep.Dado.ContextoAcessoDado">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Dado.ContextoAcessoDado.#ctor(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            Construtor usando configuração de string de conexao customizada, independente de app.config
            </summary>
            <param name="providerFactory">Provider a ser usado</param>
            <param name="connectionString">String de conexao</param>
        </member>
        <member name="M:Acontep.Dado.ContextoAcessoDado.#ctor(System.String,System.String)">
            <summary>
            Construtor usando configuração de string de conexao customizada, independente de app.config
            </summary>
            <param name="providerName">Nome do provider a ser usado</param>
            <param name="connectionString">String de conexao</param>
        </member>
        <member name="M:Acontep.Dado.ContextoAcessoDado.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionStringSettingName"></param>
        </member>
        <member name="M:Acontep.Dado.ContextoAcessoDado.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Dado.ContextoAcessoDado.Dispose(System.Boolean)">
            <summary>
            Libera recursos envolvidos
            </summary>
            <param name="disposing">Indica se o metodo esta sendo chamado por dispose ou pelo finalizador</param>
        </member>
        <member name="P:Acontep.Dado.ContextoAcessoDado.ConnectionStringSettingName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Dado.ContextoAcessoDado.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Dado.ContextoAcessoDado.Transaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Dado.ContextoAcessoDado.ProviderFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acontep.Dado.ContextoAcessoDado.MensagemErroObjectDisposedException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Acontep.IO.FileHelper">
            <summary>
            Classe utilitária para o gerenciamento de arquivos no Acontep
            </summary>
        </member>
        <member name="M:Acontep.IO.FileHelper.ObterPathRepositorioTransfer">
            <summary>
            Retorna o diretorio onde estão guardados os arquivos para transferência.
            Todos os arquivos nessa pasta estão passíveis de um "delete".
            Caso não exista, é criado o diretório.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.IO.FileHelper.ObterPathRepositorioTransfer(System.String)">
            <summary>
            Retorna o diretorio onde estão guardados os arquivos para transferência.
            Todos os arquivos nessa pasta estão passíveis de um "delete".
            Caso não exista, é criado o diretório.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.IO.FileHelper.ObterPathRepositorioSistemas(System.Int32)">
            <summary>
            Retorna o diretorio onde estão guardados os arquivos de cada sistema.
            Todos os arquivos nessa pasta sofreão backup.
            Caso não exista, é criado o diretório.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.IO.FileHelper.ObterPathRepositorioSistemas(System.Int32,System.String)">
            <summary>
            Retorna o diretorio onde estão guardados os arquivos de cada sistema.
            Todos os arquivos nessa pasta sofreão backup.
            Caso não exista, é criado o diretório.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.IO.FileHelper.ObterPathRepositorioTabelas(System.String)">
            <summary>
            Retorna o diretorio onde estão guardados os arquivos de cada tabela. Por padrão, o nome do arquivo será o ID do registro da tabela.
            Todos os arquivos nessa pasta sofreão backup.
            Caso não exista, é criado o diretório.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Acontep.IO.FileHelper.ObterPathArquivo(System.String,System.Int32)">
            <summary>
            Retorna o path do arquivo. Caso não exista, retorna nulo.
            </summary>
            <param name="tabela">The tabela.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Acontep.IO.FileHelper.ApagarArquivo(System.String,System.Int32)">
            <summary>
            Apaga o arquivo caso ele exista
            </summary>
            <param name="tabela">nome da tabela</param>
            <param name="id">id da tabela</param>
        </member>
        <member name="M:Acontep.IO.FileHelper.AtualizarArquivo(System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            Atualizar o arquivo (apaga se ele existir e inclui o novo arquivo)
            </summary>
            <param name="tabela">nome da tabela</param>
            <param name="id">id do arquivo</param>
            <param name="original_fileName"></param>
            <param name="conteudo"></param>
        </member>
        <member name="M:Acontep.IO.FileHelper.CriarPathSeNaoExitir(System.String)">
            <summary>
            Cria o diretório para a tabela caso ele não exista
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Acontep.Validacoes.ValidacaoUtil">
            <summary>
            Utilitario de geração de <see cref="T:Acontep.Validacoes.Validacao"/> a partir de estrturas de dados
            </summary>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoUtil.DeDataColumn(System.Data.DataColumn)">
            <summary>
            Gera <see cref="T:Acontep.Validacoes.Validacao"/> a partir de um <see cref="T:System.Data.DataColumn"/>
            </summary>
            <remarks>
            Uma instancia de <see cref="T:Acontep.Validacoes.Validacao"/> é criada a partir da definição do <see cref="T:System.Data.DataColumn"/>
            usando <see cref="P:System.Data.DataColumn.DataType"/>, <see cref="P:System.Data.DataColumn.AllowDBNull"/> e, se <see cref="P:System.Data.DataColumn.DataType"/>
            for do tipo <see cref="T:System.String"/>, <see cref="P:System.Data.DataColumn.MaxLength"/>.
            O nome do campo a ser usado nas mensagens de validação é obtido a partir de <see cref="P:System.Data.DataColumn.Caption"/>.
            </remarks>
            <param name="dataColumn"><see cref="T:System.Data.DataColumn"/> a partir do qual uma instancia de <see cref="T:Acontep.Validacoes.Validacao"/> vai ser gerada</param>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoUtil.DeDataColumn(System.Data.DataColumn,System.String)">
            <summary>
            Gera <see cref="T:Acontep.Validacoes.Validacao"/> a partir de um <see cref="T:System.Data.DataColumn"/>
            </summary>
            <remarks>
            Uma instancia de <see cref="T:Acontep.Validacoes.Validacao"/> é criada a partir da definição do <see cref="T:System.Data.DataColumn"/>
            usando <see cref="P:System.Data.DataColumn.DataType"/>, <see cref="P:System.Data.DataColumn.AllowDBNull"/> e, se <see cref="P:System.Data.DataColumn.DataType"/>
            for do tipo <see cref="T:System.String"/>, <see cref="P:System.Data.DataColumn.MaxLength"/>.
            O nome do campo usado nas mensagens de validação é <paramref name="rotuloMensagemErro"/>.
            </remarks>
            <param name="dataColumn"><see cref="T:System.Data.DataColumn"/> a partir do qual uma instancia de <see cref="T:Acontep.Validacoes.Validacao"/> vai ser gerada</param>
            <param name="rotuloMensagemErro">Nome usado para identificar o campo nas mensagens de erro</param>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoUtil.DeDataTable(System.Data.DataTable)">
            <summary>
            Retorna um instancia de <see cref="T:Acontep.Validacoes.Validacao"/> para cada <see cref="T:System.Data.DataColumn"/> em <paramref name="dataTable"/> 
            </summary>
            <seealso cref="M:Acontep.Validacoes.ValidacaoUtil.DeDataColumn(System.Data.DataColumn)"/>
            <param name="dataTable"><see cref="T:System.Data.DataTable"/> de onde vai se instanciar um <see cref="T:Acontep.Validacoes.Validacao"/> para cada <see cref="T:System.Data.DataColumn"/></param>
        </member>
        <member name="M:Acontep.Validacoes.ValidacaoUtil.DeDataSet(System.Data.DataSet)">
            <summary>
            Para cada <see cref="T:System.Data.DataTable"/> em <see cref="P:System.Data.DataSet.Tables"/> retorna um instancia de <see cref="T:Acontep.Validacoes.Validacao"/> de cada <see cref="T:System.Data.DataColumn"/> em <paramref name="dataTable"/> 
            </summary>
            <seealso cref="M:Acontep.Validacoes.ValidacaoUtil.DeDataTable(System.Data.DataTable)"/>
            <param name="dataSet"><see cref="T:System.Data.DataSet"/> de onde se vai gerar as instancias de <see cref="T:Acontep.Validacoes.Validacao"/> para cada <see cref="T:System.Data.DataColumn"/> em cada <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="T:Acontep.Validacoes.ValidacaoResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoResource.ErroForaIntervaloExclusivo">
            <summary>
              Looks up a localized string similar to O valor informado para {0} deve estar entre {1} e {2}!.
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoResource.ErroForaIntervaloInclusivo">
            <summary>
              Looks up a localized string similar to O valor informado para {0} deve se maior ou igual a {1} e menor ou igual a {2}!.
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoResource.ErroFormatoDadoInvalido">
            <summary>
              Looks up a localized string similar to O valor informado para {0} possui um formato incorreto!.
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoResource.ErroTipoConversaoInvalida">
            <summary>
              Looks up a localized string similar to O valor informado para {0} não pode ser convertido..
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoResource.ErroTipoParaIntervaloValorInvalido">
            <summary>
              Looks up a localized string similar to O valor &apos;{0}&apos; do tipo &apos;{1}&apos; não é incompatível e nem pode ser convertido para um valor compatível com o tipo &apos;{2}&apos; configurado para essa instância..
            </summary>
        </member>
        <member name="P:Acontep.Validacoes.ValidacaoResource.ErroValorRequerido">
            <summary>
              Looks up a localized string similar to Informe um valor para {0}.
            </summary>
        </member>
        <member name="T:Acontep.Diagnostico.Log">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acontep.Diagnostico.Log.DetalhesGeral(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.AvisoGeral(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.InfoGeral(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroGeral(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroGeral(System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroGeral(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="cabecalho"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.DetalhesDebugBiblioteca(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.AvisoDebugBiblioteca(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.InfoDebugBiblioteca(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugBiblioteca(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugBiblioteca(System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugBiblioteca(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="cabecalho"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.DetalhesDebugNg(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.AvisoDebugNg(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.InfoDebugNg(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugNg(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugNg(System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugNg(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="cabecalho"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.DetalhesDebugUI(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.AvisoDebugUI(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.InfoDebugUI(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugUI(System.String)">
            <summary>
            
            </summary>
            <param name="mensagem"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugUI(System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Acontep.Diagnostico.Log.ErroDebugUI(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="cabecalho"></param>
            <param name="exception"></param>
        </member>
    </members>
</doc>
