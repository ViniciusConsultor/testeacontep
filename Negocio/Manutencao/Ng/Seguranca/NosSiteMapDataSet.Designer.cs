//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Acontep.Manutencao.Seguranca {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("NosSiteMapDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NosSiteMapDataSet : System.Data.DataSet {
        
        private RaizDataTable tableRaiz;
        
        private NoDataTable tableNo;
        
        private System.Data.DataRelation relationRaiz_No;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NosSiteMapDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NosSiteMapDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Raiz"] != null)) {
                    base.Tables.Add(new RaizDataTable(ds.Tables["Raiz"]));
                }
                if ((ds.Tables["No"] != null)) {
                    base.Tables.Add(new NoDataTable(ds.Tables["No"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RaizDataTable Raiz {
            get {
                return this.tableRaiz;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NoDataTable No {
            get {
                return this.tableNo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            NosSiteMapDataSet cln = ((NosSiteMapDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Raiz"] != null)) {
                    base.Tables.Add(new RaizDataTable(ds.Tables["Raiz"]));
                }
                if ((ds.Tables["No"] != null)) {
                    base.Tables.Add(new NoDataTable(ds.Tables["No"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRaiz = ((RaizDataTable)(base.Tables["Raiz"]));
            if ((initTable == true)) {
                if ((this.tableRaiz != null)) {
                    this.tableRaiz.InitVars();
                }
            }
            this.tableNo = ((NoDataTable)(base.Tables["No"]));
            if ((initTable == true)) {
                if ((this.tableNo != null)) {
                    this.tableNo.InitVars();
                }
            }
            this.relationRaiz_No = this.Relations["Raiz_No"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NosSiteMapDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NosSiteMapDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRaiz = new RaizDataTable();
            base.Tables.Add(this.tableRaiz);
            this.tableNo = new NoDataTable();
            base.Tables.Add(this.tableNo);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("Raiz_No", new System.Data.DataColumn[] {
                        this.tableRaiz.CodigoColumn}, new System.Data.DataColumn[] {
                        this.tableNo.CodigoRaizColumn});
            this.tableNo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            this.relationRaiz_No = new System.Data.DataRelation("Raiz_No", new System.Data.DataColumn[] {
                        this.tableRaiz.CodigoColumn}, new System.Data.DataColumn[] {
                        this.tableNo.CodigoRaizColumn}, false);
            this.Relations.Add(this.relationRaiz_No);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRaiz() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            NosSiteMapDataSet ds = new NosSiteMapDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void RaizRowChangeEventHandler(object sender, RaizRowChangeEvent e);
        
        public delegate void NoRowChangeEventHandler(object sender, NoRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RaizDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCodigo;
            
            private System.Data.DataColumn columnNome;
            
            private System.Data.DataColumn columnDescricao;
            
            private System.Data.DataColumn columnPermiteAcessoInternet;
            
            private System.Data.DataColumn columnUrl;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizDataTable() {
                this.TableName = "Raiz";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RaizDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RaizDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodigoColumn {
                get {
                    return this.columnCodigo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NomeColumn {
                get {
                    return this.columnNome;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescricaoColumn {
                get {
                    return this.columnDescricao;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PermiteAcessoInternetColumn {
                get {
                    return this.columnPermiteAcessoInternet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UrlColumn {
                get {
                    return this.columnUrl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow this[int index] {
                get {
                    return ((RaizRow)(this.Rows[index]));
                }
            }
            
            public event RaizRowChangeEventHandler RaizRowChanging;
            
            public event RaizRowChangeEventHandler RaizRowChanged;
            
            public event RaizRowChangeEventHandler RaizRowDeleting;
            
            public event RaizRowChangeEventHandler RaizRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRaizRow(RaizRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow AddRaizRow(string Codigo, string Nome, string Descricao, bool PermiteAcessoInternet, string Url) {
                RaizRow rowRaizRow = ((RaizRow)(this.NewRow()));
                rowRaizRow.ItemArray = new object[] {
                        Codigo,
                        Nome,
                        Descricao,
                        PermiteAcessoInternet,
                        Url};
                this.Rows.Add(rowRaizRow);
                return rowRaizRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow FindByCodigo(string Codigo) {
                return ((RaizRow)(this.Rows.Find(new object[] {
                            Codigo})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RaizDataTable cln = ((RaizDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RaizDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCodigo = base.Columns["Codigo"];
                this.columnNome = base.Columns["Nome"];
                this.columnDescricao = base.Columns["Descricao"];
                this.columnPermiteAcessoInternet = base.Columns["PermiteAcessoInternet"];
                this.columnUrl = base.Columns["Url"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCodigo = new System.Data.DataColumn("Codigo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigo);
                this.columnNome = new System.Data.DataColumn("Nome", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNome);
                this.columnDescricao = new System.Data.DataColumn("Descricao", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescricao);
                this.columnPermiteAcessoInternet = new System.Data.DataColumn("PermiteAcessoInternet", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermiteAcessoInternet);
                this.columnUrl = new System.Data.DataColumn("Url", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUrl);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCodigo}, true));
                this.columnCodigo.AllowDBNull = false;
                this.columnCodigo.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow NewRaizRow() {
                return ((RaizRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RaizRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RaizRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RaizRowChanged != null)) {
                    this.RaizRowChanged(this, new RaizRowChangeEvent(((RaizRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RaizRowChanging != null)) {
                    this.RaizRowChanging(this, new RaizRowChangeEvent(((RaizRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RaizRowDeleted != null)) {
                    this.RaizRowDeleted(this, new RaizRowChangeEvent(((RaizRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RaizRowDeleting != null)) {
                    this.RaizRowDeleting(this, new RaizRowChangeEvent(((RaizRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRaizRow(RaizRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NosSiteMapDataSet ds = new NosSiteMapDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RaizDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCodigo;
            
            private System.Data.DataColumn columnCodigoRaiz;
            
            private System.Data.DataColumn columnNome;
            
            private System.Data.DataColumn columnUrl;
            
            private System.Data.DataColumn columnDescricao;
            
            private System.Data.DataColumn columnPermiteAcessoInternet;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoDataTable() {
                this.TableName = "No";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodigoColumn {
                get {
                    return this.columnCodigo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodigoRaizColumn {
                get {
                    return this.columnCodigoRaiz;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NomeColumn {
                get {
                    return this.columnNome;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UrlColumn {
                get {
                    return this.columnUrl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescricaoColumn {
                get {
                    return this.columnDescricao;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PermiteAcessoInternetColumn {
                get {
                    return this.columnPermiteAcessoInternet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoRow this[int index] {
                get {
                    return ((NoRow)(this.Rows[index]));
                }
            }
            
            public event NoRowChangeEventHandler NoRowChanging;
            
            public event NoRowChangeEventHandler NoRowChanged;
            
            public event NoRowChangeEventHandler NoRowDeleting;
            
            public event NoRowChangeEventHandler NoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNoRow(NoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoRow AddNoRow(string Codigo, RaizRow parentRaizRowByRaiz_No, string Nome, string Url, string Descricao, bool PermiteAcessoInternet) {
                NoRow rowNoRow = ((NoRow)(this.NewRow()));
                rowNoRow.ItemArray = new object[] {
                        Codigo,
                        parentRaizRowByRaiz_No[0],
                        Nome,
                        Url,
                        Descricao,
                        PermiteAcessoInternet};
                this.Rows.Add(rowNoRow);
                return rowNoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoRow FindByCodigo(string Codigo) {
                return ((NoRow)(this.Rows.Find(new object[] {
                            Codigo})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                NoDataTable cln = ((NoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new NoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCodigo = base.Columns["Codigo"];
                this.columnCodigoRaiz = base.Columns["CodigoRaiz"];
                this.columnNome = base.Columns["Nome"];
                this.columnUrl = base.Columns["Url"];
                this.columnDescricao = base.Columns["Descricao"];
                this.columnPermiteAcessoInternet = base.Columns["PermiteAcessoInternet"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCodigo = new System.Data.DataColumn("Codigo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigo);
                this.columnCodigoRaiz = new System.Data.DataColumn("CodigoRaiz", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigoRaiz);
                this.columnNome = new System.Data.DataColumn("Nome", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNome);
                this.columnUrl = new System.Data.DataColumn("Url", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUrl);
                this.columnDescricao = new System.Data.DataColumn("Descricao", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescricao);
                this.columnPermiteAcessoInternet = new System.Data.DataColumn("PermiteAcessoInternet", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermiteAcessoInternet);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCodigo}, true));
                this.columnCodigo.AllowDBNull = false;
                this.columnCodigo.Unique = true;
                this.columnCodigoRaiz.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoRow NewNoRow() {
                return ((NoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new NoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(NoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NoRowChanged != null)) {
                    this.NoRowChanged(this, new NoRowChangeEvent(((NoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NoRowChanging != null)) {
                    this.NoRowChanging(this, new NoRowChangeEvent(((NoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NoRowDeleted != null)) {
                    this.NoRowDeleted(this, new NoRowChangeEvent(((NoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NoRowDeleting != null)) {
                    this.NoRowDeleting(this, new NoRowChangeEvent(((NoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNoRow(NoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NosSiteMapDataSet ds = new NosSiteMapDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RaizRow : System.Data.DataRow {
            
            private RaizDataTable tableRaiz;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RaizRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRaiz = ((RaizDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Codigo {
                get {
                    return ((string)(this[this.tableRaiz.CodigoColumn]));
                }
                set {
                    this[this.tableRaiz.CodigoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nome {
                get {
                    try {
                        return ((string)(this[this.tableRaiz.NomeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Nome\' in table \'Raiz\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaiz.NomeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descricao {
                get {
                    try {
                        return ((string)(this[this.tableRaiz.DescricaoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Descricao\' in table \'Raiz\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaiz.DescricaoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PermiteAcessoInternet {
                get {
                    try {
                        return ((bool)(this[this.tableRaiz.PermiteAcessoInternetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PermiteAcessoInternet\' in table \'Raiz\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaiz.PermiteAcessoInternetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Url {
                get {
                    try {
                        return ((string)(this[this.tableRaiz.UrlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Url\' in table \'Raiz\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaiz.UrlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNomeNull() {
                return this.IsNull(this.tableRaiz.NomeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNomeNull() {
                this[this.tableRaiz.NomeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescricaoNull() {
                return this.IsNull(this.tableRaiz.DescricaoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescricaoNull() {
                this[this.tableRaiz.DescricaoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermiteAcessoInternetNull() {
                return this.IsNull(this.tableRaiz.PermiteAcessoInternetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermiteAcessoInternetNull() {
                this[this.tableRaiz.PermiteAcessoInternetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUrlNull() {
                return this.IsNull(this.tableRaiz.UrlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUrlNull() {
                this[this.tableRaiz.UrlColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoRow[] GetNoRows() {
                return ((NoRow[])(base.GetChildRows(this.Table.ChildRelations["Raiz_No"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NoRow : System.Data.DataRow {
            
            private NoDataTable tableNo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNo = ((NoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Codigo {
                get {
                    return ((string)(this[this.tableNo.CodigoColumn]));
                }
                set {
                    this[this.tableNo.CodigoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodigoRaiz {
                get {
                    return ((string)(this[this.tableNo.CodigoRaizColumn]));
                }
                set {
                    this[this.tableNo.CodigoRaizColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nome {
                get {
                    try {
                        return ((string)(this[this.tableNo.NomeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Nome\' in table \'No\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNo.NomeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Url {
                get {
                    try {
                        return ((string)(this[this.tableNo.UrlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Url\' in table \'No\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNo.UrlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descricao {
                get {
                    try {
                        return ((string)(this[this.tableNo.DescricaoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Descricao\' in table \'No\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNo.DescricaoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PermiteAcessoInternet {
                get {
                    try {
                        return ((bool)(this[this.tableNo.PermiteAcessoInternetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PermiteAcessoInternet\' in table \'No\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNo.PermiteAcessoInternetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow RaizRow {
                get {
                    return ((RaizRow)(this.GetParentRow(this.Table.ParentRelations["Raiz_No"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Raiz_No"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNomeNull() {
                return this.IsNull(this.tableNo.NomeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNomeNull() {
                this[this.tableNo.NomeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUrlNull() {
                return this.IsNull(this.tableNo.UrlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUrlNull() {
                this[this.tableNo.UrlColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescricaoNull() {
                return this.IsNull(this.tableNo.DescricaoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescricaoNull() {
                this[this.tableNo.DescricaoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermiteAcessoInternetNull() {
                return this.IsNull(this.tableNo.PermiteAcessoInternetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermiteAcessoInternetNull() {
                this[this.tableNo.PermiteAcessoInternetColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RaizRowChangeEvent : System.EventArgs {
            
            private RaizRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRowChangeEvent(RaizRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NoRowChangeEvent : System.EventArgs {
            
            private NoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoRowChangeEvent(NoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591