//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Acontep.Ng.Manutencao.Rad {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ListaSQL")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ListaSQL : System.Data.DataSet {
        
        private ProjetoDataTable tableProjeto;
        
        private ArquivosDataTable tableArquivos;
        
        private System.Data.DataRelation relationFK_Configuracao_Arquivos;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListaSQL() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ListaSQL(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Projeto"] != null)) {
                    base.Tables.Add(new ProjetoDataTable(ds.Tables["Projeto"]));
                }
                if ((ds.Tables["Arquivos"] != null)) {
                    base.Tables.Add(new ArquivosDataTable(ds.Tables["Arquivos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjetoDataTable Projeto {
            get {
                return this.tableProjeto;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ArquivosDataTable Arquivos {
            get {
                return this.tableArquivos;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ListaSQL cln = ((ListaSQL)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Projeto"] != null)) {
                    base.Tables.Add(new ProjetoDataTable(ds.Tables["Projeto"]));
                }
                if ((ds.Tables["Arquivos"] != null)) {
                    base.Tables.Add(new ArquivosDataTable(ds.Tables["Arquivos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProjeto = ((ProjetoDataTable)(base.Tables["Projeto"]));
            if ((initTable == true)) {
                if ((this.tableProjeto != null)) {
                    this.tableProjeto.InitVars();
                }
            }
            this.tableArquivos = ((ArquivosDataTable)(base.Tables["Arquivos"]));
            if ((initTable == true)) {
                if ((this.tableArquivos != null)) {
                    this.tableArquivos.InitVars();
                }
            }
            this.relationFK_Configuracao_Arquivos = this.Relations["FK_Configuracao_Arquivos"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ListaSQL";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ListaSQL.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProjeto = new ProjetoDataTable();
            base.Tables.Add(this.tableProjeto);
            this.tableArquivos = new ArquivosDataTable();
            base.Tables.Add(this.tableArquivos);
            this.relationFK_Configuracao_Arquivos = new System.Data.DataRelation("FK_Configuracao_Arquivos", new System.Data.DataColumn[] {
                        this.tableProjeto.IDColumn}, new System.Data.DataColumn[] {
                        this.tableArquivos.IDConfiguracaoColumn}, false);
            this.Relations.Add(this.relationFK_Configuracao_Arquivos);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjeto() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArquivos() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ListaSQL ds = new ListaSQL();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ProjetoRowChangeEventHandler(object sender, ProjetoRowChangeEvent e);
        
        public delegate void ArquivosRowChangeEventHandler(object sender, ArquivosRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjetoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnStringConexao;
            
            private System.Data.DataColumn columnProvider;
            
            private System.Data.DataColumn columnProjeto;
            
            private System.Data.DataColumn columnDescricao;
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTimeOut;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjetoDataTable() {
                this.TableName = "Projeto";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjetoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjetoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StringConexaoColumn {
                get {
                    return this.columnStringConexao;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProviderColumn {
                get {
                    return this.columnProvider;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjetoColumn {
                get {
                    return this.columnProjeto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescricaoColumn {
                get {
                    return this.columnDescricao;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeOutColumn {
                get {
                    return this.columnTimeOut;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjetoRow this[int index] {
                get {
                    return ((ProjetoRow)(this.Rows[index]));
                }
            }
            
            public event ProjetoRowChangeEventHandler ProjetoRowChanging;
            
            public event ProjetoRowChangeEventHandler ProjetoRowChanged;
            
            public event ProjetoRowChangeEventHandler ProjetoRowDeleting;
            
            public event ProjetoRowChangeEventHandler ProjetoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjetoRow(ProjetoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjetoRow AddProjetoRow(string StringConexao, string Provider, string Projeto, string Descricao, System.Guid ID, int TimeOut) {
                ProjetoRow rowProjetoRow = ((ProjetoRow)(this.NewRow()));
                rowProjetoRow.ItemArray = new object[] {
                        StringConexao,
                        Provider,
                        Projeto,
                        Descricao,
                        ID,
                        TimeOut};
                this.Rows.Add(rowProjetoRow);
                return rowProjetoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjetoRow FindByID(System.Guid ID) {
                return ((ProjetoRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProjetoDataTable cln = ((ProjetoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProjetoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStringConexao = base.Columns["StringConexao"];
                this.columnProvider = base.Columns["Provider"];
                this.columnProjeto = base.Columns["Projeto"];
                this.columnDescricao = base.Columns["Descricao"];
                this.columnID = base.Columns["ID"];
                this.columnTimeOut = base.Columns["TimeOut"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStringConexao = new System.Data.DataColumn("StringConexao", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStringConexao);
                this.columnProvider = new System.Data.DataColumn("Provider", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvider);
                this.columnProjeto = new System.Data.DataColumn("Projeto", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjeto);
                this.columnDescricao = new System.Data.DataColumn("Descricao", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescricao);
                this.columnID = new System.Data.DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTimeOut = new System.Data.DataColumn("TimeOut", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOut);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Configuracao", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnTimeOut.DefaultValue = ((int)(30));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjetoRow NewProjetoRow() {
                return ((ProjetoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProjetoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProjetoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjetoRowChanged != null)) {
                    this.ProjetoRowChanged(this, new ProjetoRowChangeEvent(((ProjetoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjetoRowChanging != null)) {
                    this.ProjetoRowChanging(this, new ProjetoRowChangeEvent(((ProjetoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjetoRowDeleted != null)) {
                    this.ProjetoRowDeleted(this, new ProjetoRowChangeEvent(((ProjetoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjetoRowDeleting != null)) {
                    this.ProjetoRowDeleting(this, new ProjetoRowChangeEvent(((ProjetoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjetoRow(ProjetoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ListaSQL ds = new ListaSQL();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjetoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArquivosDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVirtualPath;
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnIDConfiguracao;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArquivosDataTable() {
                this.TableName = "Arquivos";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArquivosDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ArquivosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VirtualPathColumn {
                get {
                    return this.columnVirtualPath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDConfiguracaoColumn {
                get {
                    return this.columnIDConfiguracao;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArquivosRow this[int index] {
                get {
                    return ((ArquivosRow)(this.Rows[index]));
                }
            }
            
            public event ArquivosRowChangeEventHandler ArquivosRowChanging;
            
            public event ArquivosRowChangeEventHandler ArquivosRowChanged;
            
            public event ArquivosRowChangeEventHandler ArquivosRowDeleting;
            
            public event ArquivosRowChangeEventHandler ArquivosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArquivosRow(ArquivosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArquivosRow AddArquivosRow(string VirtualPath, System.Guid ID, ProjetoRow parentProjetoRowByFK_Configuracao_Arquivos) {
                ArquivosRow rowArquivosRow = ((ArquivosRow)(this.NewRow()));
                rowArquivosRow.ItemArray = new object[] {
                        VirtualPath,
                        ID,
                        parentProjetoRowByFK_Configuracao_Arquivos[4]};
                this.Rows.Add(rowArquivosRow);
                return rowArquivosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ArquivosDataTable cln = ((ArquivosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ArquivosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVirtualPath = base.Columns["VirtualPath"];
                this.columnID = base.Columns["ID"];
                this.columnIDConfiguracao = base.Columns["IDConfiguracao"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVirtualPath = new System.Data.DataColumn("VirtualPath", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVirtualPath);
                this.columnID = new System.Data.DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIDConfiguracao = new System.Data.DataColumn("IDConfiguracao", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDConfiguracao);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArquivosRow NewArquivosRow() {
                return ((ArquivosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ArquivosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ArquivosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArquivosRowChanged != null)) {
                    this.ArquivosRowChanged(this, new ArquivosRowChangeEvent(((ArquivosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArquivosRowChanging != null)) {
                    this.ArquivosRowChanging(this, new ArquivosRowChangeEvent(((ArquivosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArquivosRowDeleted != null)) {
                    this.ArquivosRowDeleted(this, new ArquivosRowChangeEvent(((ArquivosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArquivosRowDeleting != null)) {
                    this.ArquivosRowDeleting(this, new ArquivosRowChangeEvent(((ArquivosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArquivosRow(ArquivosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ListaSQL ds = new ListaSQL();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArquivosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjetoRow : System.Data.DataRow {
            
            private ProjetoDataTable tableProjeto;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjetoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjeto = ((ProjetoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StringConexao {
                get {
                    try {
                        return ((string)(this[this.tableProjeto.StringConexaoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StringConexao\' in table \'Projeto\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjeto.StringConexaoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Provider {
                get {
                    try {
                        return ((string)(this[this.tableProjeto.ProviderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Provider\' in table \'Projeto\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjeto.ProviderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Projeto {
                get {
                    try {
                        return ((string)(this[this.tableProjeto.ProjetoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Projeto\' in table \'Projeto\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjeto.ProjetoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descricao {
                get {
                    try {
                        return ((string)(this[this.tableProjeto.DescricaoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Descricao\' in table \'Projeto\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjeto.DescricaoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((System.Guid)(this[this.tableProjeto.IDColumn]));
                }
                set {
                    this[this.tableProjeto.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeOut {
                get {
                    try {
                        return ((int)(this[this.tableProjeto.TimeOutColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeOut\' in table \'Projeto\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjeto.TimeOutColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStringConexaoNull() {
                return this.IsNull(this.tableProjeto.StringConexaoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStringConexaoNull() {
                this[this.tableProjeto.StringConexaoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderNull() {
                return this.IsNull(this.tableProjeto.ProviderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderNull() {
                this[this.tableProjeto.ProviderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjetoNull() {
                return this.IsNull(this.tableProjeto.ProjetoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjetoNull() {
                this[this.tableProjeto.ProjetoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescricaoNull() {
                return this.IsNull(this.tableProjeto.DescricaoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescricaoNull() {
                this[this.tableProjeto.DescricaoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOutNull() {
                return this.IsNull(this.tableProjeto.TimeOutColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOutNull() {
                this[this.tableProjeto.TimeOutColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArquivosRow[] GetArquivosRows() {
                return ((ArquivosRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Configuracao_Arquivos"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ArquivosRow : System.Data.DataRow {
            
            private ArquivosDataTable tableArquivos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArquivosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArquivos = ((ArquivosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VirtualPath {
                get {
                    try {
                        return ((string)(this[this.tableArquivos.VirtualPathColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VirtualPath\' in table \'Arquivos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArquivos.VirtualPathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableArquivos.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID\' in table \'Arquivos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArquivos.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDConfiguracao {
                get {
                    try {
                        return ((System.Guid)(this[this.tableArquivos.IDConfiguracaoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IDConfiguracao\' in table \'Arquivos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArquivos.IDConfiguracaoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjetoRow ConfiguracaoRow {
                get {
                    return ((ProjetoRow)(this.GetParentRow(this.Table.ParentRelations["FK_Configuracao_Arquivos"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Configuracao_Arquivos"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVirtualPathNull() {
                return this.IsNull(this.tableArquivos.VirtualPathColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVirtualPathNull() {
                this[this.tableArquivos.VirtualPathColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableArquivos.IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableArquivos.IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDConfiguracaoNull() {
                return this.IsNull(this.tableArquivos.IDConfiguracaoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDConfiguracaoNull() {
                this[this.tableArquivos.IDConfiguracaoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjetoRowChangeEvent : System.EventArgs {
            
            private ProjetoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjetoRowChangeEvent(ProjetoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjetoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ArquivosRowChangeEvent : System.EventArgs {
            
            private ArquivosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArquivosRowChangeEvent(ArquivosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArquivosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591